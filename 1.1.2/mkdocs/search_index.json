{
    "docs": [
        {
            "location": "/", 
            "text": "What's OpenVeo Publish ?\n\n\nOpenVeo Publish is an \nOpenVeo\n plugin.\n\n\nOpenVeo Publish adds the following features :\n\n\n\n\nThe possibility to upload videos, on \nVimeo\n, with synchronized images. (\nWatcher\n)\n\n\nBack end pages :\n\n\nA page to manage the list of videos\n\n\nA page to create and organize video categories\n\n\nA page to create new video properties\n\n\nA page to start / stop the watcher\n\n\nA page to add chapters on a video or cut a video (begin / end)\n\n\n\n\n\n\nA public page to play a video with images synchronization and chapters\n\n\n\n\nScreenshots\n\n\nBack end catalogue\n\n\n\n\nBack end chapters\n\n\n\n\nBack end categories\n\n\n\n\nBack end video properties\n\n\n\n\nBack end watcher\n\n\n\n\nPublic video with images synchronization", 
            "title": "INTRODUCTION"
        }, 
        {
            "location": "/#whats-openveo-publish", 
            "text": "OpenVeo Publish is an  OpenVeo  plugin.  OpenVeo Publish adds the following features :   The possibility to upload videos, on  Vimeo , with synchronized images. ( Watcher )  Back end pages :  A page to manage the list of videos  A page to create and organize video categories  A page to create new video properties  A page to start / stop the watcher  A page to add chapters on a video or cut a video (begin / end)    A public page to play a video with images synchronization and chapters", 
            "title": "What's OpenVeo Publish ?"
        }, 
        {
            "location": "/#screenshots", 
            "text": "Back end catalogue   Back end chapters   Back end categories   Back end video properties   Back end watcher   Public video with images synchronization", 
            "title": "Screenshots"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Installation\n\n\nFrom \nOpenVeo\n root :\n\n\nnpm install @openveo/publish\n\n\n\nNb :\n You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using \nadvanced configuration\n.\n\n\nStart / Restart OpenVeo\n\n\nOpenVeo Publish is now installed. You can start / restart OpenVeo :\n\n\nnode server.js\n\n\n\nLog to the back end\n\n\nYou can now log to the back end to access Publish plugin administration pages.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "From  OpenVeo  root :  npm install @openveo/publish  Nb :  You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration anytime using  advanced configuration .", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#start-restart-openveo", 
            "text": "OpenVeo Publish is now installed. You can start / restart OpenVeo :  node server.js", 
            "title": "Start / Restart OpenVeo"
        }, 
        {
            "location": "/getting-started/#log-to-the-back-end", 
            "text": "You can now log to the back end to access Publish plugin administration pages.", 
            "title": "Log to the back end"
        }, 
        {
            "location": "/watcher/", 
            "text": "Introduction\n\n\nThe Watcher is capable of listening to some directories specified during \nplugin's configuration\n.\n\n\nTwo types of files can be copied in these directories :\n\n\n\n\ntar files\n\n\nmp4 files\n\n\n\n\nSoon after the file has been copied, it will appear in back end catalogue page where all videos are referenced.\n\n\n\n\ntar files\n\n\ntar files are used for videos with synchronized images. A valid tar file must contain a \nvideo file\n, a \n.session\n file, a \nsynchro.xml\n file and a \nlist of images\n.\n\n\n.session file\n\n\n.session\n file is used to store information about the package. It is written in JSON format and must contain at least :\n\n\n{\n  \nfilename\n: \nvideo.mp4\n // Name of the video file in the package\n}\n\n\n\n\nIt can contain some optional properties :\n\n\n{\n  \ndate\n: 1425916390, // The date the video was recorded (in Unix epoch time)\n  \nrich-media\n: true, // true to indicates that video has associated images, false if only the video is in the package\n  \nduration\n: 30 // The duration of the video (in seconds)\n}\n\n\n\n\nNb :\n All extra properties are kept but won't be used directly by Publish.\n\n\nsynchro.xml file\n\n\nsynchro.xml\n file is used to map each images to a video timecode. If \nrich-media\n property is set to \"true\" in \n.session\n file, \nsynchro.xml\n file must be present.\n\n\nIt is written in XML format and must respect the following structure :\n\n\n?xml version=\n1.0\n?\n\n\nplayer\n\n\n  \n!-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) --\n\n  \nsynchro id=\nslide_00000.jpeg\n timecode=\n0\n/\n\n\n  \n!-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) --\n\n  \nsynchro id=\nslide_00001.jpeg\n timecode=\n1400\n/\n\n\n  \n!-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) --\n\n  \nsynchro id=\nslide_00002.jpeg\n timecode=\n9500\n/\n\n\n\n/player\n\n\n\n\n\nList of images\n\n\nA list of images to synchronize with the video as defined in \nsynchro.xml\n.\n\n\nVideo file\n\n\nAn mp4 file corresponding to the one specified by property \nfilename\n in \n.session\n file.\n\n\nmp4 files\n\n\nIf your video doesn't have associated images, a simple mp4 file will be enough.", 
            "title": "Watcher"
        }, 
        {
            "location": "/watcher/#introduction", 
            "text": "The Watcher is capable of listening to some directories specified during  plugin's configuration .  Two types of files can be copied in these directories :   tar files  mp4 files   Soon after the file has been copied, it will appear in back end catalogue page where all videos are referenced.", 
            "title": "Introduction"
        }, 
        {
            "location": "/watcher/#tar-files", 
            "text": "tar files are used for videos with synchronized images. A valid tar file must contain a  video file , a  .session  file, a  synchro.xml  file and a  list of images .", 
            "title": "tar files"
        }, 
        {
            "location": "/watcher/#session-file", 
            "text": ".session  file is used to store information about the package. It is written in JSON format and must contain at least :  {\n   filename :  video.mp4  // Name of the video file in the package\n}  It can contain some optional properties :  {\n   date : 1425916390, // The date the video was recorded (in Unix epoch time)\n   rich-media : true, // true to indicates that video has associated images, false if only the video is in the package\n   duration : 30 // The duration of the video (in seconds)\n}  Nb :  All extra properties are kept but won't be used directly by Publish.", 
            "title": ".session file"
        }, 
        {
            "location": "/watcher/#synchroxml-file", 
            "text": "synchro.xml  file is used to map each images to a video timecode. If  rich-media  property is set to \"true\" in  .session  file,  synchro.xml  file must be present.  It is written in XML format and must respect the following structure :  ?xml version= 1.0 ?  player \n\n   !-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) -- \n   synchro id= slide_00000.jpeg  timecode= 0 / \n\n   !-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) -- \n   synchro id= slide_00001.jpeg  timecode= 1400 / \n\n   !-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) -- \n   synchro id= slide_00002.jpeg  timecode= 9500 /  /player", 
            "title": "synchro.xml file"
        }, 
        {
            "location": "/watcher/#list-of-images", 
            "text": "A list of images to synchronize with the video as defined in  synchro.xml .", 
            "title": "List of images"
        }, 
        {
            "location": "/watcher/#video-file", 
            "text": "An mp4 file corresponding to the one specified by property  filename  in  .session  file.", 
            "title": "Video file"
        }, 
        {
            "location": "/watcher/#mp4-files", 
            "text": "If your video doesn't have associated images, a simple mp4 file will be enough.", 
            "title": "mp4 files"
        }, 
        {
            "location": "/web-service/", 
            "text": "Introduction\n\n\nOpenVeo Publish define its own Web Service endpoints. Web Service authentication is documented in \nOpenVeo\n project.\n\n\nVideos can be in different states :\n\n\n\n\n0\n : The video is on error\n\n\n1\n : The video is waiting to be treated\n\n\n2\n : The video is copying\n\n\n3\n : The video package is extracting\n\n\n4\n : The video package is validating\n\n\n5\n : The video package is preparing\n\n\n6\n : The video is waiting for manual upload\n\n\n7\n : The video is uploading to Vimeo\n\n\n8\n : The video is being configured on Vimeo\n\n\n9\n : The video timecodes are being saved\n\n\n10\n : The video synchronized images are being saved\n\n\n11\n : The video is uploaded and ready but unpublished\n\n\n12\n : The video is uploaded and ready and published\n\n\n13\n : The video thumbnail is generated\n\n\n\n\nEndpoints\n\n\nVideos\n\n\nGet published videos.\n\n\nGET WEB_SERVICE_URL/publish/videos\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\ndate\n\n\nSort videos by either \ntitle\n, \ndescription\n, \ndate\n or \npublished\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n1\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n-\n\n\nLimit number of videos per page. If not specified get all videos\n\n\n\n\n\n\nproperties\n\n\nArray\n\n\nNo\n\n\n-\n\n\nA list of properties with the property name as the key and the expected property value as the value. (e.g. \nproperties[property1Name]=property1Value\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n200\n\n\nGot the list of videos (even if the list is empty)\n\n\n\n\n\n\n\n\n{\n  \nvideos\n : [\n    {\n      \nid\n : 1444396683105, // Id of the video\n      \nstate\n : 12, // Video state\n      \ndate\n : 1425916390000, // Date in timestamp\n      \nmetadata\n : {\n        // All metadata from package .session file\n      },\n      \ntype\n : vimeo, // Video associated platform (only vimeo is supported)\n      \nerrorCode\n : -1, // Video error code or -1 if no error\n      \ncategory\n : \n, // Video category\n      \nproperties\n : { // Video custom properties\n        \n1444809111034\n: { // Custom property id\n          \nid\n : 1444809111034, // Custom property id\n          \nname\n : \nProperty name\n, // Custom property name\n          \ndescription\n : \nProperty description\n, // Custom property description\n          \ntype\n : \ntext\n, // Custom property type\n          \nvalue\n : \nProperty value\n // Custom property value\n        }\n        ...\n      },\n      \npackageType\n : \ntar\n, // Initialize package type (either tar or mp4)\n      \nlink\n : \n/publish/video/1444396683105\n, // Path to play the video\n      \nmediaId\n : \n141902178\n, // Video id on Vimeo\n      \navailable\n : 1, // Video id on Vimeo\n      \nthumbnail\n : \n/1444396683105/thumbnail.jpg\n,\n      \nfiles\n : [ // Video files in different format\n        {\n          \nquality\n : 100, // Video file quality\n          \nwidth\n : 480, // Video width\n          \nheight\n : 270, // Video height\n          \nlink\n : \nhttps://player.vimeo.com/external/141902178.mobile.mp4?s=e5e51fa4d4d5437f6b0fe33d5c789624\nprofile_id=116\noauth2_token_id=54813546\n, // Video link\n        }\n        ...\n      ],\n      \ntitle\n : \nVideo title\n,\n      \ndescription\n : \nVideo title\n,\n      \nchapters\n : [ // Chapters\n        {\n          \nname\n : \nChapter 1\n, // Chapter name\n          \ndescription\n : \nChapter 1\n, // Chapter description\n          \nvalue\n : 0.04 // Chapter timecode in percent (percentage of the video)\n        },\n        {\n          \nname\n : \nChapter 2\n, // Chapter name\n          \ndescription\n : \nChapter 2\n, // Chapter description\n          \nvalue\n : 0.3 // Chapter timecode in percent (percentage of the video)\n        }\n      ],\n      \ncut\n : [ // Cut information (begin and end)\n        {\n          \ntype\n : \nbegin\n, // Cut type\n          \nvalue\n : 0 // Begin timecode (percentage of the media)\n        },\n        {\n          \ntype\n : \nend\n, // Cut type\n          \nvalue\n : 0.9 // End timecode (percentage of the media)\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\n\n\nGet information about a video.\n\n\nGET WEB_SERVICE_URL/publish/video/{video_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nvideo_id\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe id of the video to fetch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nThe id of the video is missing\n\n\n\n\n\n\n200\n\n\nGot the video\n\n\n\n\n\n\n\n\n{\n  \nvideo\n : {\n    \nid\n : 1444396683105, // Id of the video\n    \nstate\n : 12, // Video state\n    \ndate\n : 1425916390000, // Date in timestamp\n    \nmetadata\n : {\n      // All metadata from package .session file\n    },\n    \ntype\n : vimeo, // Video associated platform (only vimeo is supported)\n    \nerrorCode\n : -1, // Video error code or -1 if no error\n    \ncategory\n : \n, // Video category\n    \nproperties\n : { // Video custom properties\n      \n1444809111034\n : \nProperty value\n // Custom property value by id\n      ...\n    },\n    \npackageType\n : \ntar\n, // Initialize package type (either tar or mp4)\n    \nlink\n : \n/publish/video/1444396683105\n, // Path to play the video\n    \nmediaId\n : \n141902178\n, // Video id on Vimeo\n    \navailable\n : 1, // Video id on Vimeo\n    \nthumbnail\n : \n/1444396683105/thumbnail.jpg\n,\n    \nfiles\n : [ // Video files in different format\n      {\n        \nquality\n : 100, // Video file quality\n        \nwidth\n : 480, // Video width\n        \nheight\n : 270, // Video height\n        \nlink\n : \nhttps://player.vimeo.com/external/141902178.mobile.mp4?s=e5e51fa4d4d5437f6b0fe33d5c789624\nprofile_id=116\noauth2_token_id=54813546\n, // Video link\n      }\n      ...\n    ],\n    \ntitle\n : \nVideo title\n,\n    \ndescription\n : \nVideo title\n,\n    \nchapters\n : [ // Chapters\n      {\n        \nname\n : \nChapter 1\n, // Chapter name\n        \ndescription\n : \nChapter 1\n, // Chapter description\n        \nvalue\n : 0.04 // Chapter timecode in percent (percentage of the video)\n      },\n      {\n        \nname\n : \nChapter 2\n, // Chapter name\n        \ndescription\n : \nChapter 2\n, // Chapter description\n        \nvalue\n : 0.3 // Chapter timecode in percent (percentage of the video)\n      }\n    ],\n    \ncut\n : [ // Cut information (begin and end)\n      {\n        \ntype\n : \nbegin\n, // Cut type\n        \nvalue\n : 0 // Begin timecode (percentage of the media)\n      },\n      {\n        \ntype\n : \nend\n, // Cut type\n        \nvalue\n : 0.9 // End timecode (percentage of the media)\n      }\n    ],\n    \ntimecodes\n : [ // Video synchronized images\n      {\n        \nimage\n : {\n          \nlarge\n : \n/1440175380631/slide_00000.jpeg\n, // Large image\n          \nsmall\n : \n/1440175380631/slide_00000.jpeg?thumb=small\n // Small image\n        },\n        \ntimecode\n : 0 // Timecode when to display the image (in ms)\n      },\n      {\n        \nimage\n : {\n          \nlarge\n : \n/1440175380631/slide_00001.jpeg\n, // Large image\n          \nsmall\n : \n/1440175380631/slide_00001.jpeg?thumb=small\n // Small image\n        },\n        \ntimecode\n : 1400 // Timecode when to display the image (in ms)\n      }\n      ...\n    ]\n  }\n}", 
            "title": "Web Service"
        }, 
        {
            "location": "/web-service/#introduction", 
            "text": "OpenVeo Publish define its own Web Service endpoints. Web Service authentication is documented in  OpenVeo  project.  Videos can be in different states :   0  : The video is on error  1  : The video is waiting to be treated  2  : The video is copying  3  : The video package is extracting  4  : The video package is validating  5  : The video package is preparing  6  : The video is waiting for manual upload  7  : The video is uploading to Vimeo  8  : The video is being configured on Vimeo  9  : The video timecodes are being saved  10  : The video synchronized images are being saved  11  : The video is uploaded and ready but unpublished  12  : The video is uploaded and ready and published  13  : The video thumbnail is generated", 
            "title": "Introduction"
        }, 
        {
            "location": "/web-service/#endpoints", 
            "text": "", 
            "title": "Endpoints"
        }, 
        {
            "location": "/web-service/#videos", 
            "text": "Get published videos.  GET WEB_SERVICE_URL/publish/videos     Name  Type  Required  Default  Details      sortBy  String  No  date  Sort videos by either  title ,  description ,  date  or  published    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  1  The expected page    limit  Number  No  -  Limit number of videos per page. If not specified get all videos    properties  Array  No  -  A list of properties with the property name as the key and the expected property value as the value. (e.g.  properties[property1Name]=property1Value )        HTTP Status Code  Details      500  An error occured on the server side    200  Got the list of videos (even if the list is empty)     {\n   videos  : [\n    {\n       id  : 1444396683105, // Id of the video\n       state  : 12, // Video state\n       date  : 1425916390000, // Date in timestamp\n       metadata  : {\n        // All metadata from package .session file\n      },\n       type  : vimeo, // Video associated platform (only vimeo is supported)\n       errorCode  : -1, // Video error code or -1 if no error\n       category  :  , // Video category\n       properties  : { // Video custom properties\n         1444809111034 : { // Custom property id\n           id  : 1444809111034, // Custom property id\n           name  :  Property name , // Custom property name\n           description  :  Property description , // Custom property description\n           type  :  text , // Custom property type\n           value  :  Property value  // Custom property value\n        }\n        ...\n      },\n       packageType  :  tar , // Initialize package type (either tar or mp4)\n       link  :  /publish/video/1444396683105 , // Path to play the video\n       mediaId  :  141902178 , // Video id on Vimeo\n       available  : 1, // Video id on Vimeo\n       thumbnail  :  /1444396683105/thumbnail.jpg ,\n       files  : [ // Video files in different format\n        {\n           quality  : 100, // Video file quality\n           width  : 480, // Video width\n           height  : 270, // Video height\n           link  :  https://player.vimeo.com/external/141902178.mobile.mp4?s=e5e51fa4d4d5437f6b0fe33d5c789624 profile_id=116 oauth2_token_id=54813546 , // Video link\n        }\n        ...\n      ],\n       title  :  Video title ,\n       description  :  Video title ,\n       chapters  : [ // Chapters\n        {\n           name  :  Chapter 1 , // Chapter name\n           description  :  Chapter 1 , // Chapter description\n           value  : 0.04 // Chapter timecode in percent (percentage of the video)\n        },\n        {\n           name  :  Chapter 2 , // Chapter name\n           description  :  Chapter 2 , // Chapter description\n           value  : 0.3 // Chapter timecode in percent (percentage of the video)\n        }\n      ],\n       cut  : [ // Cut information (begin and end)\n        {\n           type  :  begin , // Cut type\n           value  : 0 // Begin timecode (percentage of the media)\n        },\n        {\n           type  :  end , // Cut type\n           value  : 0.9 // End timecode (percentage of the media)\n        }\n      ]\n    }\n  ]\n}   Get information about a video.  GET WEB_SERVICE_URL/publish/video/{video_id}     Name  Type  Required  Default  Details      video_id  String  Yes  -  The id of the video to fetch        HTTP Status Code  Details      500  An error occured on the server side    400  The id of the video is missing    200  Got the video     {\n   video  : {\n     id  : 1444396683105, // Id of the video\n     state  : 12, // Video state\n     date  : 1425916390000, // Date in timestamp\n     metadata  : {\n      // All metadata from package .session file\n    },\n     type  : vimeo, // Video associated platform (only vimeo is supported)\n     errorCode  : -1, // Video error code or -1 if no error\n     category  :  , // Video category\n     properties  : { // Video custom properties\n       1444809111034  :  Property value  // Custom property value by id\n      ...\n    },\n     packageType  :  tar , // Initialize package type (either tar or mp4)\n     link  :  /publish/video/1444396683105 , // Path to play the video\n     mediaId  :  141902178 , // Video id on Vimeo\n     available  : 1, // Video id on Vimeo\n     thumbnail  :  /1444396683105/thumbnail.jpg ,\n     files  : [ // Video files in different format\n      {\n         quality  : 100, // Video file quality\n         width  : 480, // Video width\n         height  : 270, // Video height\n         link  :  https://player.vimeo.com/external/141902178.mobile.mp4?s=e5e51fa4d4d5437f6b0fe33d5c789624 profile_id=116 oauth2_token_id=54813546 , // Video link\n      }\n      ...\n    ],\n     title  :  Video title ,\n     description  :  Video title ,\n     chapters  : [ // Chapters\n      {\n         name  :  Chapter 1 , // Chapter name\n         description  :  Chapter 1 , // Chapter description\n         value  : 0.04 // Chapter timecode in percent (percentage of the video)\n      },\n      {\n         name  :  Chapter 2 , // Chapter name\n         description  :  Chapter 2 , // Chapter description\n         value  : 0.3 // Chapter timecode in percent (percentage of the video)\n      }\n    ],\n     cut  : [ // Cut information (begin and end)\n      {\n         type  :  begin , // Cut type\n         value  : 0 // Begin timecode (percentage of the media)\n      },\n      {\n         type  :  end , // Cut type\n         value  : 0.9 // End timecode (percentage of the media)\n      }\n    ],\n     timecodes  : [ // Video synchronized images\n      {\n         image  : {\n           large  :  /1440175380631/slide_00000.jpeg , // Large image\n           small  :  /1440175380631/slide_00000.jpeg?thumb=small  // Small image\n        },\n         timecode  : 0 // Timecode when to display the image (in ms)\n      },\n      {\n         image  : {\n           large  :  /1440175380631/slide_00001.jpeg , // Large image\n           small  :  /1440175380631/slide_00001.jpeg?thumb=small  // Small image\n        },\n         timecode  : 1400 // Timecode when to display the image (in ms)\n      }\n      ...\n    ]\n  }\n}", 
            "title": "Videos"
        }, 
        {
            "location": "/advanced-configuration/", 
            "text": "Introduction\n\n\nConfiguration files are all in user's directory under \n~/.openveo/publish\n\n\n\n\n~/.openveo/publish/publishConf.json\n\n\n~/.openveo/publish/videoPlatformConf.json\n\n\n~/.openveo/publish/loggerConf.json\n\n\n~/.openveo/publish/watcherConf.json\n\n\n\n\nNb :\n You must restart OpenVeo servers after modifications.\n\n\nConfigure the plugin\n\n\nOpen \n~/.openveo/publish/publishConf.json\n\n\n{\n  \nvideoTmpDir\n : \n/tmp/videos\n, // Temporary directory to stock uploading videos (video is removed after the upload)\n  \nmaxConcurrentPublish\n : 3, // Maximum number of videos to upload simultaneously\n  \ntimecodeFileName\n : \nsynchro.xml\n, // Name of the file containing images synchronization in tar package\n  \nmetadataFileName\n : \n.session\n // Name of the video metadata file in a tar package\n}\n\n\n\n\nConfigure video platform credentials\n\n\nUploading to Vimeo requires oauth credentials.\n\n\nOpen \n~/.openveo/publish/videoPlatformConf.json\n\n\n{\n  \nvimeo\n : { // Vimeo platform configuration\n    \nclientId\n : \nvimeo client id (available on vimeo application page https://developer.vimeo.com/apps)\n,\n    \nclientSecret\n : \nvimeo client secret (available on vimeo application page https://developer.vimeo.com/apps)\n,\n    \naccessToken\n : \nvimeo access token (available on vimeo application page https://developer.vimeo.com/apps)\n\n  }\n}\n\n\n\n\nConfigure the logger\n\n\nOpen \n~/.openveo/publish/loggerConf.json\n\n\n{\n  \nwatcher\n: { // Watcher logger\n    \nfileName\n : \n/var/log/openveo-watcher.log\n, // Path to log file\n    \nlevel\n : \ninfo\n, // Log level\n    \nmaxFileSize\n : 1048576, // Maximum log file size (in Bytes)\n    \nmaxFiles\n : 2 // Maximum number of files archived\n  },\n  \npublish\n : { // Publish logger\n    \nfileName\n : \nvar/log/openveo-publish.log\n, // Path to log file\n    \nlevel\n : \ninfo\n, // Log level\n    \nmaxFileSize\n : 1048576, // Maximum log file size (in Bytes)\n    \nmaxFiles\n : 2 // Maximum number of files archived\n  }\n}\n\n\n\n\nConfigure the \nwatcher\n\n\nOpen \n~/.openveo/publish/watcherConf.json\n\n\n{\n  \nhotFolders\n : [ // List of folders to watch\n    {\n      \ntype\n : \nvimeo\n, // Video platform to upload to for this hot folder (only vimeo is supported)\n      \npath\n : \n/user/box/hot1\n // Path to the hot folder\n    },\n    {\n      \ntype\n : \nvimeo\n, // Video platform to upload to for this hot folder (only vimeo is supported)\n      \npath\n : \n/user/box/hot2\n // Path to the hot folder\n    },\n    {\n      \ntype\n : \nvimeo\n, // Video platform to upload to for this hot folder (only vimeo is supported)\n      \npath\n : \n/user/box/hot3\n // Path to the hot folder\n    }\n    ...\n  ]\n}\n\n\n\n\nNb :\n If \ntype\n is missing for a hot folder, videos won't be automatically uploaded to Vimeo. Videos can be uploaded to Vimeo from the catalogue of videos in the back end.", 
            "title": "Advanced configuration"
        }, 
        {
            "location": "/advanced-configuration/#introduction", 
            "text": "Configuration files are all in user's directory under  ~/.openveo/publish   ~/.openveo/publish/publishConf.json  ~/.openveo/publish/videoPlatformConf.json  ~/.openveo/publish/loggerConf.json  ~/.openveo/publish/watcherConf.json   Nb :  You must restart OpenVeo servers after modifications.", 
            "title": "Introduction"
        }, 
        {
            "location": "/advanced-configuration/#configure-the-plugin", 
            "text": "Open  ~/.openveo/publish/publishConf.json  {\n   videoTmpDir  :  /tmp/videos , // Temporary directory to stock uploading videos (video is removed after the upload)\n   maxConcurrentPublish  : 3, // Maximum number of videos to upload simultaneously\n   timecodeFileName  :  synchro.xml , // Name of the file containing images synchronization in tar package\n   metadataFileName  :  .session  // Name of the video metadata file in a tar package\n}", 
            "title": "Configure the plugin"
        }, 
        {
            "location": "/advanced-configuration/#configure-video-platform-credentials", 
            "text": "Uploading to Vimeo requires oauth credentials.  Open  ~/.openveo/publish/videoPlatformConf.json  {\n   vimeo  : { // Vimeo platform configuration\n     clientId  :  vimeo client id (available on vimeo application page https://developer.vimeo.com/apps) ,\n     clientSecret  :  vimeo client secret (available on vimeo application page https://developer.vimeo.com/apps) ,\n     accessToken  :  vimeo access token (available on vimeo application page https://developer.vimeo.com/apps) \n  }\n}", 
            "title": "Configure video platform credentials"
        }, 
        {
            "location": "/advanced-configuration/#configure-the-logger", 
            "text": "Open  ~/.openveo/publish/loggerConf.json  {\n   watcher : { // Watcher logger\n     fileName  :  /var/log/openveo-watcher.log , // Path to log file\n     level  :  info , // Log level\n     maxFileSize  : 1048576, // Maximum log file size (in Bytes)\n     maxFiles  : 2 // Maximum number of files archived\n  },\n   publish  : { // Publish logger\n     fileName  :  var/log/openveo-publish.log , // Path to log file\n     level  :  info , // Log level\n     maxFileSize  : 1048576, // Maximum log file size (in Bytes)\n     maxFiles  : 2 // Maximum number of files archived\n  }\n}", 
            "title": "Configure the logger"
        }, 
        {
            "location": "/advanced-configuration/#configure-the-watcher", 
            "text": "Open  ~/.openveo/publish/watcherConf.json  {\n   hotFolders  : [ // List of folders to watch\n    {\n       type  :  vimeo , // Video platform to upload to for this hot folder (only vimeo is supported)\n       path  :  /user/box/hot1  // Path to the hot folder\n    },\n    {\n       type  :  vimeo , // Video platform to upload to for this hot folder (only vimeo is supported)\n       path  :  /user/box/hot2  // Path to the hot folder\n    },\n    {\n       type  :  vimeo , // Video platform to upload to for this hot folder (only vimeo is supported)\n       path  :  /user/box/hot3  // Path to the hot folder\n    }\n    ...\n  ]\n}  Nb :  If  type  is missing for a hot folder, videos won't be automatically uploaded to Vimeo. Videos can be uploaded to Vimeo from the catalogue of videos in the back end.", 
            "title": "Configure the watcher"
        }, 
        {
            "location": "/developers/basics/", 
            "text": "Player\n\n\nPublish uses \nOpenVeo Player\n to play a video with images synchronization.\n\n\nEntities\n\n\nPublish defines new entities :\n\n\n\n\nproperty\n - Custom properties for videos\n\n\nvideo\n - Videos", 
            "title": "Basics"
        }, 
        {
            "location": "/developers/basics/#player", 
            "text": "Publish uses  OpenVeo Player  to play a video with images synchronization.", 
            "title": "Player"
        }, 
        {
            "location": "/developers/basics/#entities", 
            "text": "Publish defines new entities :   property  - Custom properties for videos  video  - Videos", 
            "title": "Entities"
        }, 
        {
            "location": "/developers/installation/", 
            "text": "Clone project from git\n\n\nFrom OpenVeo root directory :\n\n\ncd node_modules/@openveo\ngit clone git@github.com:veo-labs/openveo-publish.git publish\n\n\n\nInstall project's dependencies\n\n\ncd publish\nnpm install", 
            "title": "Installation"
        }, 
        {
            "location": "/developers/installation/#clone-project-from-git", 
            "text": "From OpenVeo root directory :  cd node_modules/@openveo\ngit clone git@github.com:veo-labs/openveo-publish.git publish", 
            "title": "Clone project from git"
        }, 
        {
            "location": "/developers/installation/#install-projects-dependencies", 
            "text": "cd publish\nnpm install", 
            "title": "Install project's dependencies"
        }, 
        {
            "location": "/developers/back-end/", 
            "text": "Introduction\n\n\nPublish back end pages are loaded by \nOpenVeo\n.\n\n\nAs expected by OpenVeo, Publish defines a module \nov.publish\n.\n\n\nModules\n\n\nMain module (\nov.publish\n)\n\n\nPublish main module defines the following routes :\n\n\n\n\n/publish/videos\n to access the catalogue page\n\n\n/publish/video/:videoId\n to access video edition page\n\n\n/publish/watcher\n to access watcher page\n\n\n/publish/properties\n to access custom properties page\n\n\n/publish/categories\n to access categories page\n\n\n\n\nNb:\n Available services / filters defined in \nov.publish\n module are described in the \nAPI\n.", 
            "title": "Back end AngularJS"
        }, 
        {
            "location": "/developers/back-end/#introduction", 
            "text": "Publish back end pages are loaded by  OpenVeo .  As expected by OpenVeo, Publish defines a module  ov.publish .", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/back-end/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/developers/back-end/#main-module-ovpublish", 
            "text": "Publish main module defines the following routes :   /publish/videos  to access the catalogue page  /publish/video/:videoId  to access video edition page  /publish/watcher  to access watcher page  /publish/properties  to access custom properties page  /publish/categories  to access categories page   Nb:  Available services / filters defined in  ov.publish  module are described in the  API .", 
            "title": "Main module (ov.publish)"
        }, 
        {
            "location": "/developers/compilation/", 
            "text": "Introduction\n\n\nOpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.\n\n\nOpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files.\n\n\nCompiling SASS files\n\n\nYou can compile the back end SASS files using the following command :\n\n\ngrunt compass:dist\n\n\n\nOr you can watch SASS files changes using the following command :\n\n\ngrunt\n\n\n\nCompiling JavaScript files\n\n\nYou'll probably want to compile AngularJS files, in production, for better performance. You can do it using :\n\n\ngrunt prod", 
            "title": "CSS / SASS / JS compilation"
        }, 
        {
            "location": "/developers/compilation/#introduction", 
            "text": "OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.  OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/compilation/#compiling-sass-files", 
            "text": "You can compile the back end SASS files using the following command :  grunt compass:dist  Or you can watch SASS files changes using the following command :  grunt", 
            "title": "Compiling SASS files"
        }, 
        {
            "location": "/developers/compilation/#compiling-javascript-files", 
            "text": "You'll probably want to compile AngularJS files, in production, for better performance. You can do it using :  grunt prod", 
            "title": "Compiling JavaScript files"
        }, 
        {
            "location": "/developers/unit-tests/", 
            "text": "Node.js unit tests\n\n\nServer side unit tests are performed using \nMocha\n and \nChai\n. You can launch server unit tests with the following command :\n\n\ngrunt mochaTest\n\n\n\nAngularJS unit tests\n\n\nClient side unit tests are performed using \nKarma\n. You can launch client unit tests with the following command :\n\n\ngrunt karma", 
            "title": "Unit tests"
        }, 
        {
            "location": "/developers/unit-tests/#nodejs-unit-tests", 
            "text": "Server side unit tests are performed using  Mocha  and  Chai . You can launch server unit tests with the following command :  grunt mochaTest", 
            "title": "Node.js unit tests"
        }, 
        {
            "location": "/developers/unit-tests/#angularjs-unit-tests", 
            "text": "Client side unit tests are performed using  Karma . You can launch client unit tests with the following command :  grunt karma", 
            "title": "AngularJS unit tests"
        }
    ]
}