{
    "docs": [
        {
            "location": "/",
            "text": "What's OpenVeo Publish?\n\n\nOpenVeo Publish is an \nOpenVeo\n plugin.\n\n\nOpenVeo Publish adds the following features:\n\n\n\n\nThe possibility to upload videos on:\n\n\nVimeo\n\n\nYoutube\n\n\nWowza\n\n\nlocal OpenVeo HTTP server\n\n\nTLS\n\n\n\n\n\n\nThe possibility to manage synchronized multi-sources videos\n\n\nBack end pages:\n\n\nA page to manage the list of videos\n\n\nA page to create and organize video categories\n\n\nA page to create new video properties\n\n\nA page to edit the media (cut, chapters, tags)\n\n\nA page to configure the plugin\n\n\n\n\n\n\nA public page to play a video with images synchronization, chapters and tags\n\n\n\n\nScreenshots\n\n\nBack end catalogue\n\n\n\n\nBack end media editor\n\n\n\n\nBack end categories\n\n\n\n\nBack end video properties\n\n\n\n\nPublic video with images synchronization",
            "title": "INTRODUCTION"
        },
        {
            "location": "/#whats-openveo-publish",
            "text": "OpenVeo Publish is an  OpenVeo  plugin.  OpenVeo Publish adds the following features:   The possibility to upload videos on:  Vimeo  Youtube  Wowza  local OpenVeo HTTP server  TLS    The possibility to manage synchronized multi-sources videos  Back end pages:  A page to manage the list of videos  A page to create and organize video categories  A page to create new video properties  A page to edit the media (cut, chapters, tags)  A page to configure the plugin    A public page to play a video with images synchronization, chapters and tags",
            "title": "What's OpenVeo Publish?"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/#back-end-catalogue",
            "text": "",
            "title": "Back end catalogue"
        },
        {
            "location": "/#back-end-media-editor",
            "text": "",
            "title": "Back end media editor"
        },
        {
            "location": "/#back-end-categories",
            "text": "",
            "title": "Back end categories"
        },
        {
            "location": "/#back-end-video-properties",
            "text": "",
            "title": "Back end video properties"
        },
        {
            "location": "/#public-video-with-images-synchronization",
            "text": "",
            "title": "Public video with images synchronization"
        },
        {
            "location": "/prerequisites/",
            "text": "OpenVeo Publish plugin requires :\n\n\n\n\nLFTP\n - Needed to upload videos on \nWowza\n\n\nImageMagick\n - Image Magick is used to dynamically generate derivated images (e.g. thumbs)\n\n\nFFMPEG\n - FFMPEG is used to extract information from incoming videos",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/",
            "text": "Installation\n\n\nFrom \nOpenVeo\n root:\n\n\nnpm install @openveo/publish --production\n\n\n\nNb :\n You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration at anytime using \nadvanced configuration\n.\n\n\nStart / Restart OpenVeo\n\n\nOpenVeo Publish is now installed. You can start / restart OpenVeo:\n\n\nnode server.js\n\n\n\nVerify that Publish is working\n\n\nLog to the back end, you should see a new publish entry in the menu.\n\n\nLog to the back end\n\n\nYou can now log to the back end to access Publish plugin administration pages.",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#installation",
            "text": "From  OpenVeo  root:  npm install @openveo/publish --production  Nb :  You will be prompted for some configuration. Don't worry if you made an error, you can edit configuration at anytime using  advanced configuration .",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#start-restart-openveo",
            "text": "OpenVeo Publish is now installed. You can start / restart OpenVeo:  node server.js",
            "title": "Start / Restart OpenVeo"
        },
        {
            "location": "/getting-started/#verify-that-publish-is-working",
            "text": "Log to the back end, you should see a new publish entry in the menu.",
            "title": "Verify that Publish is working"
        },
        {
            "location": "/getting-started/#log-to-the-back-end",
            "text": "You can now log to the back end to access Publish plugin administration pages.",
            "title": "Log to the back end"
        },
        {
            "location": "/watcher/",
            "text": "Introduction\n\n\nThe Watcher is capable of listening to some directories specified in \nplugin's configuration\n.\n\n\nTwo types of files can be copied in these directories:\n\n\n\n\ntar files\n\n\nmp4 files\n\n\n\n\nSoon after the file has been copied, it will appear in back end catalogue page where all medias are referenced.\n\n\n\n\ntar files\n\n\ntar files are used for videos with synchronized images. A valid tar file must contain a \nvideo file\n, a \n.session\n file and a \nlist of images\n.\n\n\n.session file\n\n\n.session\n file is used to store information about the package. It is written in JSON format and must contain at least:\n\n\n{\n  \"filename\": \"video.mp4\", // Name of the video file in the package\n  \"indexes\": [ // The list of indexes in the video\n    {\n      \"type\": \"image\", // Index type (could be \"image\" or \"tag\")\n      \"timecode\": 0, // Index time (in ms) from the beginning of the video\n      \"data\": { // Index data (only for \"image\" type)\n        \"filename\": \"slide_00000.jpeg\" // The name of the image file in the tar\n      }\n    },\n    {\n      \"type\": \"tag\", // Index type (could be \"image\" or \"tag\")\n      \"timecode\": 3208 // Index time (in ms) from the beginning of the video\n    },\n    ...\n  ]\n}\n\n\n\n\nIt can contain some optional properties:\n\n\n{\n  \"date\": 1425916390, // The date the video was recorded (in Unix epoch time)\n  \"rich-media\": true, // true to indicates that video has associated images (\"indexes\" property must be present)\n  \"indexes\": [  // An array specifying a list of timecodes, their own type and data associated.\n    {\n      \"timecode\": 0, // timecode in ms\n      \"type\": \"image\", // timecode type (must be \"image\" or \"tag\")\n      \"data\": {  // related information to image timecode\n        \"filename\": \"slide_00000.jpeg\" // filename of image timecode\n      }\n    },\n    {\n      \"timecode\": 9500, // timecode in ms\n      \"type\": \"tag\", // timecode type (must be \"image\" or \"tag\")\n      \"data\": { // Optional - related information for tag timecode\n        \"tagname\": \"Very important moment\" // tagname to display, if not defined, will be replaced by 'Tag N' where N is the number of the tag\n      }\n    },\n    ...\n  ]\n}\n\n\n\n\n\"indexes\" property is used to map each video timecode to an image or a tag and must be present if \nrich-media\n property is set to \"true\". In this example:\n\n\n\n\nat time \n0ms\n, image \nslide_00000.jpeg\n will be displayed (\nslide_00000.jpeg\n file must be present in the package)\n\n\na chapter named \"\nVery important moment\n\" will be created and will redirect video at time \n9500ms\n.\n\n\n\n\nNb:\n All extra properties are kept but won't be used directly by Publish.\n\n\nsynchro.xml file \n(DEPRECATED)\n\n\n The use of this file is deprecated.\nThis file is used only if indexes information are not in .session file.\n\n\nsynchro.xml\n file is used to map each images to a video timecode. If \nrich-media\n property is set to \"true\" in \n.session\n file, \nsynchro.xml\n file must be present.\n\n\nIt is written in XML format and must respect the following structure:\n\n\n<?xml version=\"1.0\"?>\n<player>\n\n  <!-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) -->\n  <synchro id=\"slide_00000.jpeg\" timecode=\"0\"/>\n\n  <!-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) -->\n  <synchro id=\"slide_00001.jpeg\" timecode=\"1400\"/>\n\n  <!-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) -->\n  <synchro id=\"slide_00002.jpeg\" timecode=\"9500\"/>\n\n</player>\n\n\n\n\nList of images\n\n\nA list of images to synchronize with the video as defined in \n.session\n file.\n\n\nVideo file\n\n\nAn mp4 file corresponding to the one specified by property \nfilename\n in \n.session\n file.\n\n\nmp4 files\n\n\nIf your video doesn't have associated images, a simple mp4 file will be enough.",
            "title": "Watcher"
        },
        {
            "location": "/watcher/#introduction",
            "text": "The Watcher is capable of listening to some directories specified in  plugin's configuration .  Two types of files can be copied in these directories:   tar files  mp4 files   Soon after the file has been copied, it will appear in back end catalogue page where all medias are referenced.",
            "title": "Introduction"
        },
        {
            "location": "/watcher/#tar-files",
            "text": "tar files are used for videos with synchronized images. A valid tar file must contain a  video file , a  .session  file and a  list of images .",
            "title": "tar files"
        },
        {
            "location": "/watcher/#session-file",
            "text": ".session  file is used to store information about the package. It is written in JSON format and must contain at least:  {\n  \"filename\": \"video.mp4\", // Name of the video file in the package\n  \"indexes\": [ // The list of indexes in the video\n    {\n      \"type\": \"image\", // Index type (could be \"image\" or \"tag\")\n      \"timecode\": 0, // Index time (in ms) from the beginning of the video\n      \"data\": { // Index data (only for \"image\" type)\n        \"filename\": \"slide_00000.jpeg\" // The name of the image file in the tar\n      }\n    },\n    {\n      \"type\": \"tag\", // Index type (could be \"image\" or \"tag\")\n      \"timecode\": 3208 // Index time (in ms) from the beginning of the video\n    },\n    ...\n  ]\n}  It can contain some optional properties:  {\n  \"date\": 1425916390, // The date the video was recorded (in Unix epoch time)\n  \"rich-media\": true, // true to indicates that video has associated images (\"indexes\" property must be present)\n  \"indexes\": [  // An array specifying a list of timecodes, their own type and data associated.\n    {\n      \"timecode\": 0, // timecode in ms\n      \"type\": \"image\", // timecode type (must be \"image\" or \"tag\")\n      \"data\": {  // related information to image timecode\n        \"filename\": \"slide_00000.jpeg\" // filename of image timecode\n      }\n    },\n    {\n      \"timecode\": 9500, // timecode in ms\n      \"type\": \"tag\", // timecode type (must be \"image\" or \"tag\")\n      \"data\": { // Optional - related information for tag timecode\n        \"tagname\": \"Very important moment\" // tagname to display, if not defined, will be replaced by 'Tag N' where N is the number of the tag\n      }\n    },\n    ...\n  ]\n}  \"indexes\" property is used to map each video timecode to an image or a tag and must be present if  rich-media  property is set to \"true\". In this example:   at time  0ms , image  slide_00000.jpeg  will be displayed ( slide_00000.jpeg  file must be present in the package)  a chapter named \" Very important moment \" will be created and will redirect video at time  9500ms .   Nb:  All extra properties are kept but won't be used directly by Publish.",
            "title": ".session file"
        },
        {
            "location": "/watcher/#synchroxml-file-deprecated",
            "text": "The use of this file is deprecated.\nThis file is used only if indexes information are not in .session file.  synchro.xml  file is used to map each images to a video timecode. If  rich-media  property is set to \"true\" in  .session  file,  synchro.xml  file must be present.  It is written in XML format and must respect the following structure:  <?xml version=\"1.0\"?>\n<player>\n\n  <!-- At time 0ms, image slide_00000.jpeg must be displayed (slide_00000.jpeg must be present in the package) -->\n  <synchro id=\"slide_00000.jpeg\" timecode=\"0\"/>\n\n  <!-- At time 1400ms, image slide_00001.jpeg must be displayed (slide_00001.jpeg must be present in the package) -->\n  <synchro id=\"slide_00001.jpeg\" timecode=\"1400\"/>\n\n  <!-- At time 9500ms, image slide_00002.jpeg must be displayed (slide_00002.jpeg must be present in the package) -->\n  <synchro id=\"slide_00002.jpeg\" timecode=\"9500\"/>\n\n</player>",
            "title": "synchro.xml file (DEPRECATED)"
        },
        {
            "location": "/watcher/#list-of-images",
            "text": "A list of images to synchronize with the video as defined in  .session  file.",
            "title": "List of images"
        },
        {
            "location": "/watcher/#video-file",
            "text": "An mp4 file corresponding to the one specified by property  filename  in  .session  file.",
            "title": "Video file"
        },
        {
            "location": "/watcher/#mp4-files",
            "text": "If your video doesn't have associated images, a simple mp4 file will be enough.",
            "title": "mp4 files"
        },
        {
            "location": "/advanced-configuration/",
            "text": "Introduction\n\n\nConfiguration files are all in user's directory under \n~/.openveo/publish\n\n\n\n\n~/.openveo/publish/publishConf.json\n\n\n~/.openveo/publish/videoPlatformConf.json\n\n\n~/.openveo/publish/watcherConf.json\n\n\n\n\nNb :\n You must restart OpenVeo servers after modifications.\n\n\nConfigure the plugin\n\n\nOpen \n~/.openveo/publish/publishConf.json\n\n\n{\n  \"videoTmpDir\" : \"/tmp/videos\", // Temporary directory to stock uploading videos (video is removed after the upload)\n  \"maxConcurrentPublish\" : 3, // Maximum number of videos to upload simultaneously\n  \"metadataFileName\" : \".session\" // Name of the video metadata file in a tar package\n}\n\n\n\n\nConfigure video platform credentials\n\n\nOpen \n~/.openveo/publish/videoPlatformConf.json\n\n\n{\n  \"vimeo\" : { // Vimeo platform configuration\n    \"clientId\" : \"vimeo client id (available on vimeo application page https://developer.vimeo.com/apps)\",\n    \"clientSecret\" : \"vimeo client secret (available on vimeo application page https://developer.vimeo.com/apps)\",\n    \"accessToken\" : \"vimeo access token (available on vimeo application page https://developer.vimeo.com/apps)\"\n  },\n  \"youtube\": {\n    \"uploadMethod\": \"uploadResumable\", // (uploadResumable or uploadClassic; default: uploadResumable)\n    \"googleOAuth\": {\n       \"clientId\": \"Youtube API client Id (available in your Google Developper Console )\",\n       \"clientSecret\":  \"Youtube API client secret (available in your Google Developper Console )\",\n       \"redirectUrl\": \"http://SERVER_HOST_NAME:SERVER_PORT/be/publish/configuration/googleOAuthAssosiation\"\n     },\n     \"privacy\": \"public\" // (public, private or unlisted; default: public)\n  },\n  \"wowza\":{\n    \"protocol\": \"sftp\", // (ftp, sftp, ftps)\n    \"host\": \"HOST\", //server host where the video will be uploaded\n    \"port\": \"PORT\", //server host port\n    \"user\": \"USERNAME\", // server username\n    \"pwd\": \"PASSWORD\", // server password\n    \"vodFilePath\": \"/files/\", // path where the video will be uploaded\n    \"streamPath\": \"https://HOST/APP_NAME\" // stream path exposed by wowza to access video, HOST and APP_NAME are defined in wowza\n  },\n  \"local\": {\n    \"vodFilePath\": \"/path/to/host/folder/\",// path where the video will be uploaded on the local machine\n    \"streamPath\": \"stream/path/\" //stream path exposed by local server relative to Openveo CDN to access the video\n  },\n  \"tls\": {\n    \"nfsPath\": \"/absolute/path/to/nfs/directory\", // path of the directory shared with TLS\n    \"mediaDirectoryPath\": \"path/to/media/directory\", // path of the directory holding medias (relative to nfsPath)\n    \"accessToken\": \"TLS access token\", // access token to use to authenticate requests to TLS web service\n    \"url\": \"https://TLS_SERVER_HOST_NAME:TLS_SERVER_PORT/web/service/uri\", // URL of the TLS web service\n    \"certificate\": \"/absolute/path/to/full/chain/certificate.crt\" // path to the full chain certificate if top authority is not part of system well known authorities\n  }\n}\n\n\n\n\nTo upload videos on \nYoutube\n, publish requires googleOAuth credentials.\n\nTo upload videos on \nWowza\n, you need to install \nlftp\n on your system.\n\n\nConfigure the \nwatcher\n\n\nOpen \n~/.openveo/publish/watcherConf.json\n\n\n{\n  \"hotFolders\" : [ // List of folders to watch\n    {\n      \"type\" : \"vimeo\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot2\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"youtube\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot3\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"wowza\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot4\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"local\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot5\" // Path to the hot folder\n    },\n    {\n      // No video platform specified: let user choose on which platform the video will be uploaded\n      \"path\" : \"/user/box/hot1\" // Path to the hot folder\n    },\n    ...\n  ]\n}\n\n\n\n\nNb :\n If \ntype\n is missing for a hot folder, videos won't be automatically uploaded to a platform. Videos can be uploaded to a platform from the catalogue of videos in the back end.",
            "title": "Advanced configuration"
        },
        {
            "location": "/advanced-configuration/#introduction",
            "text": "Configuration files are all in user's directory under  ~/.openveo/publish   ~/.openveo/publish/publishConf.json  ~/.openveo/publish/videoPlatformConf.json  ~/.openveo/publish/watcherConf.json   Nb :  You must restart OpenVeo servers after modifications.",
            "title": "Introduction"
        },
        {
            "location": "/advanced-configuration/#configure-the-plugin",
            "text": "Open  ~/.openveo/publish/publishConf.json  {\n  \"videoTmpDir\" : \"/tmp/videos\", // Temporary directory to stock uploading videos (video is removed after the upload)\n  \"maxConcurrentPublish\" : 3, // Maximum number of videos to upload simultaneously\n  \"metadataFileName\" : \".session\" // Name of the video metadata file in a tar package\n}",
            "title": "Configure the plugin"
        },
        {
            "location": "/advanced-configuration/#configure-video-platform-credentials",
            "text": "Open  ~/.openveo/publish/videoPlatformConf.json  {\n  \"vimeo\" : { // Vimeo platform configuration\n    \"clientId\" : \"vimeo client id (available on vimeo application page https://developer.vimeo.com/apps)\",\n    \"clientSecret\" : \"vimeo client secret (available on vimeo application page https://developer.vimeo.com/apps)\",\n    \"accessToken\" : \"vimeo access token (available on vimeo application page https://developer.vimeo.com/apps)\"\n  },\n  \"youtube\": {\n    \"uploadMethod\": \"uploadResumable\", // (uploadResumable or uploadClassic; default: uploadResumable)\n    \"googleOAuth\": {\n       \"clientId\": \"Youtube API client Id (available in your Google Developper Console )\",\n       \"clientSecret\":  \"Youtube API client secret (available in your Google Developper Console )\",\n       \"redirectUrl\": \"http://SERVER_HOST_NAME:SERVER_PORT/be/publish/configuration/googleOAuthAssosiation\"\n     },\n     \"privacy\": \"public\" // (public, private or unlisted; default: public)\n  },\n  \"wowza\":{\n    \"protocol\": \"sftp\", // (ftp, sftp, ftps)\n    \"host\": \"HOST\", //server host where the video will be uploaded\n    \"port\": \"PORT\", //server host port\n    \"user\": \"USERNAME\", // server username\n    \"pwd\": \"PASSWORD\", // server password\n    \"vodFilePath\": \"/files/\", // path where the video will be uploaded\n    \"streamPath\": \"https://HOST/APP_NAME\" // stream path exposed by wowza to access video, HOST and APP_NAME are defined in wowza\n  },\n  \"local\": {\n    \"vodFilePath\": \"/path/to/host/folder/\",// path where the video will be uploaded on the local machine\n    \"streamPath\": \"stream/path/\" //stream path exposed by local server relative to Openveo CDN to access the video\n  },\n  \"tls\": {\n    \"nfsPath\": \"/absolute/path/to/nfs/directory\", // path of the directory shared with TLS\n    \"mediaDirectoryPath\": \"path/to/media/directory\", // path of the directory holding medias (relative to nfsPath)\n    \"accessToken\": \"TLS access token\", // access token to use to authenticate requests to TLS web service\n    \"url\": \"https://TLS_SERVER_HOST_NAME:TLS_SERVER_PORT/web/service/uri\", // URL of the TLS web service\n    \"certificate\": \"/absolute/path/to/full/chain/certificate.crt\" // path to the full chain certificate if top authority is not part of system well known authorities\n  }\n}  To upload videos on  Youtube , publish requires googleOAuth credentials. \nTo upload videos on  Wowza , you need to install  lftp  on your system.",
            "title": "Configure video platform credentials"
        },
        {
            "location": "/advanced-configuration/#configure-the-watcher",
            "text": "Open  ~/.openveo/publish/watcherConf.json  {\n  \"hotFolders\" : [ // List of folders to watch\n    {\n      \"type\" : \"vimeo\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot2\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"youtube\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot3\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"wowza\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot4\" // Path to the hot folder\n    },\n    {\n      \"type\" : \"local\", // Video platform to upload to for this hot folder (only local, vimeo, wowza or youtube is supported)\n      \"path\" : \"/user/box/hot5\" // Path to the hot folder\n    },\n    {\n      // No video platform specified: let user choose on which platform the video will be uploaded\n      \"path\" : \"/user/box/hot1\" // Path to the hot folder\n    },\n    ...\n  ]\n}  Nb :  If  type  is missing for a hot folder, videos won't be automatically uploaded to a platform. Videos can be uploaded to a platform from the catalogue of videos in the back end.",
            "title": "Configure the watcher"
        },
        {
            "location": "/pluginsDevelopers/web-service/",
            "text": "Introduction\n\n\nOpenVeo Publish defines its own Web Service endpoints. Web Service authentication is documented in \nOpenVeo\n project.\n\n\nEndpoints\n\n\nVideos\n\n\nGet videos.\n\n\nGET WEB_SERVICE_URL/publish/videos\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on both videos title and description\n\n\n\n\n\n\nstates\n\n\nString/Array\n\n\nNo\n\n\n-\n\n\nTo filter videos by state\n\n\n\n\n\n\ndateStart\n\n\nString/Number\n\n\nNo\n\n\n-\n\n\nTo get videos after or equal to a date (in any format supported by JavaScript Date object)\n\n\n\n\n\n\ndateEnd\n\n\nString/Number\n\n\nNo\n\n\n-\n\n\nTo get videos before or equal to a date (in any format supported by JavaScript Date object)\n\n\n\n\n\n\ncategories\n\n\nString/Array\n\n\nNo\n\n\n-\n\n\nTo filter videos by category\n\n\n\n\n\n\ngroups\n\n\nString/Array\n\n\nNo\n\n\n-\n\n\nTo filter videos by group\n\n\n\n\n\n\nuser\n\n\nString/Array\n\n\nNo\n\n\n-\n\n\nTo filter videos by user\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\ndate\n\n\nTo sort videos by either \ntitle\n, \ndescription\n, \ndate\n, \nstate\n, \nviews\n or \ncategory\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nTo limit the number of videos per page\n\n\n\n\n\n\nproperties\n\n\nObject\n\n\nNo\n\n\n-\n\n\nA list of custom properties with the property id as the key and the expected property value as the value (e.g. \nproperties[property1Id]=property1Value\n) \nDate time\n properties accept either timestamps or literal dates\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned videos\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned videos. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of videos\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\" : [\n    {\n      \"id\" : 1444396683105, // Id of the video\n      \"state\" : 12, // Video state\n      \"date\" : 1425916390000, // Date in timestamp\n      \"type\" : \"vimeo\", // Video associated platform\n      \"errorCode\" : -1, // Video error code or -1 if no error\n      \"category\" : \"\", // Video category\n      \"properties\" : { // Video custom properties\n        \"1444809111034\": { // Custom property id\n          \"id\" : 1444809111034, // Custom property id\n          \"name\" : \"Property name\", // Custom property name\n          \"description\" : \"Property description\", // Custom property description\n          \"type\" : \"text\", // Custom property type\n          \"value\" : \"Property value\" // Custom property value\n        }\n        ...\n      },\n      \"link\" : \"http://openveo.local/publish/video/1444396683105\", // Path to play the video\n      \"mediaId\" : \"141902178\", // Video id on video platform\n      \"available\" : true, // Indicates if video is available or is being encoded\n      \"thumbnail\" : \"http://openveo-cdn.local/1444396683105/thumbnail.jpg\",\n      \"title\" : \"Video title\",\n      \"leadParagraph\" : \"Video lead paragraph\",\n      \"description\" : \"Video description\",\n      \"chapters\" : [ // Chapters\n        {\n          \"name\" : \"Chapter 1\", // Chapter name\n          \"description\" : \"Chapter 1\", // Chapter description\n          \"value\" : 0.04 // Chapter timecode in percent (percentage of the video)\n        },\n        ...\n      ],\n      \"tags\" : [ // Tags\n        {\n          \"name\" : \"Tag 1\", // Tag name\n          \"description\" : \"Tag 1 description\", // Tag description\n          \"value\" : 0.3, // Tag timecode in percent (percentage of the video)\n          \"file\" : { // Tag associated file\n            \"mimetype\" : \"video/mp4\",\n            \"basePath\" : \"http://openveo-cdn.local/path/to/ressource/video.mp4\",\n            \"originalname\" : \"original-name.mp4\",\n            \"filename\" : \"name.mp4\",\n            \"size\" : 102458\n          }\n        },\n        ...\n      ],\n      \"cut\" : [ // Cut information (begin and end)\n        {\n          \"type\" : \"begin\", // Cut type\n          \"value\" : 0 // Begin timecode (percentage of the media)\n        },\n        {\n          \"type\" : \"end\", // Cut type\n          \"value\" : 0.9 // End timecode (percentage of the media)\n        }\n      ],\n      \"timecodes\" : [ // Video synchronized images\n        {\n          \"image\" : {\n            \"large\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg\", // Large image\n            \"small\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg?style=publish-thumb-200\" // Small image\n          },\n          \"timecode\" : 0 // Timecode when to display the image (in ms)\n        },\n        ...\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 0,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\nVideos can be in different states:\n\n\n\n\n0\n : The video is on error\n\n\n1\n : The video is waiting to be treated\n\n\n2\n : The video is copying\n\n\n3\n : The video package is extracting\n\n\n4\n : The video package is validating\n\n\n5\n : The video package is preparing\n\n\n6\n : The video is waiting for manual upload\n\n\n7\n : The video is uploading to the video platform\n\n\n8\n : The video is being configured on the video platform\n\n\n9\n : The video timecodes are being saved\n\n\n10\n : The video synchronized images are being saved\n\n\n11\n : The video is uploaded and ready but unpublished\n\n\n12\n : The video is uploaded, ready and published\n\n\n13\n : The video thumbnail is generated\n\n\n14\n : The video metadatas are being retrieved\n\n\n15\n : The video is defragmenting\n\n\n\n\n\n\nGet a video.\n\n\nGET WEB_SERVICE_URL/publish/videos/{video_id}\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned video\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned video. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the video\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nThe id of the video is missing\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nVideo not found\n\n\n\n\n\n\n\n\n{\n  \"entity\" : {\n    \"id\" : 1444396683105, // Id of the video\n    \"state\" : 12, // Video state\n    \"date\" : 1425916390000, // Date in timestamp\n    \"type\" : \"vimeo\", // Video associated platform\n    \"errorCode\" : -1, // Video error code or -1 if no error\n    \"category\" : \"\", // Video category\n    \"properties\" : { // Video custom properties\n      \"1444809111034\": { // Custom property id\n        \"id\" : 1444809111034, // Custom property id\n        \"name\" : \"Property name\", // Custom property name\n        \"description\" : \"Property description\", // Custom property description\n        \"type\" : \"text\", // Custom property type\n        \"value\" : \"Property value\" // Custom property value\n      },\n      ...\n    },\n    \"packageType\" : \"tar\", // Initialize package type (either tar or mp4)\n    \"link\" : \"http://openveo.local/publish/video/1444396683105\", // Path to play the video\n    \"mediaId\" : \"141902178\", // Video id on video platform\n    \"available\" : true, // Indicates if video is available or is being encoded\n    \"thumbnail\" : \"http://openveo-cdn.local//1444396683105/thumbnail.jpg\",\n    \"title\" : \"Video title\",\n    \"leadParagraph\" : \"Video lead paragraph\",\n    \"description\" : \"Video description\",\n    \"chapters\" : [ // Chapters\n      {\n        \"name\" : \"Chapter 1\", // Chapter name\n        \"description\" : \"Chapter 1\", // Chapter description\n        \"value\" : 0.04 // Chapter timecode in percent (percentage of the video)\n      },\n      ...\n    ],\n    \"tags\" : [ // Tags\n      {\n        \"name\" : \"Tag 1\", // Tag name\n        \"description\" : \"Tag 1 description\", // Tag description\n        \"value\" : 0.3, // Tag timecode in percent (percentage of the video)\n        \"file\" : { // Tag associated file\n          \"mimetype\" : \"video/mp4\",\n          \"basePath\" : \"http://openveo-cdn.local/path/to/ressource/video.mp4\",\n          \"originalname\" : \"original-name.mp4\",\n          \"filename\" : \"name.mp4\",\n          \"size\" : 102458\n        }\n      },\n      ...\n    ],\n    \"cut\" : [ // Cut information (begin and end)\n      {\n        \"type\" : \"begin\", // Cut type\n        \"value\" : 0 // Begin timecode (percentage of the media)\n      },\n      {\n        \"type\" : \"end\", // Cut type\n        \"value\" : 0.9 // End timecode (percentage of the media)\n      }\n    ],\n    \"timecodes\" : [ // Video synchronized images\n      {\n        \"image\" : {\n          \"large\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg\", // Large image\n          \"small\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg?style=publish-thumb-200\" // Small image\n        },\n        \"timecode\" : 0 // Timecode when to display the image (in ms)\n      },\n      ...\n    ]\n  }\n}\n\n\n\n\n\n\nDelete videos.\n\n\nDELETE WEB_SERVICE_URL/publish/videos/{video_id}\n\n\n\nWith \n{video_id}\n a comma separated list of video ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe videos have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the video ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\n\n\nAdd video.\n\n\nPOST WEB_SERVICE_URL/publish/videos\n\n\n\nExpects a multipart/form-data body containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nFile\n\n\nYes\n\n\n-\n\n\nThe video file\n\n\n\n\n\n\nthumbnail\n\n\nFile\n\n\nNo\n\n\n-\n\n\nThe video thumbnail\n\n\n\n\n\n\ninfo\n\n\nObject\n\n\nYes\n\n\n-\n\n\nThe video metadata\n\n\n\n\n\n\ninfo.title\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe video title\n\n\n\n\n\n\ninfo.properties\n\n\nObject\n\n\nNo\n\n\n-\n\n\nThe custom properties of the video with the keys as custom property ids and values as custom property values\n\n\n\n\n\n\ninfo.category\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe id of the category the video belongs to\n\n\n\n\n\n\ninfo.date\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe date of the video (in any format supported by JavaScript Date object)\n\n\n\n\n\n\ninfo.leadParagraph\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe video lead paragraph\n\n\n\n\n\n\ninfo.description\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe video description\n\n\n\n\n\n\ninfo.groups\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of content groups (ids) the video belongs to\n\n\n\n\n\n\ninfo.platform\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe platform to upload the file to. If no platform is specified the video will be in \"\nWaiting for upload\n\" state. Platform could be one of the platforms defined in \nvideoPlatformConf.json\n configuration file (either \nvimeo\n, \nwowza\n, \nyoutube\n or \nlocal\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe video has been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing body\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"id\": 42\n}\n\n\n\n\n\n\nPublish videos.\n\n\nPOST WEB_SERVICE_URL/publish/videos/{video_id}/publish\n\n\n\nWith \n{video_id}\n a comma separated list of video ids to publish.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe videos have been published\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the video ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\n\n\nUnpublish videos.\n\n\nPOST WEB_SERVICE_URL/publish/videos/{video_id}/unpublish\n\n\n\nWith \n{video_id}\n a comma separated list of video ids to unpublish.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe videos have been unpublished\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the video ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nProperties\n\n\nGet custom properties.\n\n\nGET WEB_SERVICE_URL/publish/properties\n\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nquery\n\n\nString\n\n\nNo\n\n\n-\n\n\nTo search on both properties name and description\n\n\n\n\n\n\ntypes\n\n\nString/Array\n\n\nNo\n\n\n-\n\n\nTo filter properties by type\n\n\n\n\n\n\nsortBy\n\n\nString\n\n\nNo\n\n\nname\n\n\nTo sort properties by either \nname\n or \ndescription\n\n\n\n\n\n\nsortOrder\n\n\nString\n\n\nNo\n\n\ndesc\n\n\nSort order (either \nasc\n or \ndesc\n)\n\n\n\n\n\n\npage\n\n\nNumber\n\n\nNo\n\n\n0\n\n\nThe expected page\n\n\n\n\n\n\nlimit\n\n\nNumber\n\n\nNo\n\n\n10\n\n\nTo limit the number of properties per page\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned properties\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned properties. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of properties\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong list of parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"text\"\n    },\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"list\",\n      \"values\": [\"value1\", \"value2\"]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 0,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}\n\n\n\n\n\n\nGet a property.\n\n\nGET WEB_SERVICE_URL/publish/properties/{property_id}\n\n\n\nWith \n{property_id}\n the id of the property to retrieve.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ninclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to include from returned property\n\n\n\n\n\n\nexclude\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe list of fields to exclude from returned property. Ignored if include is also specified\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the property\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nThe id of the property is missing\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n404\n\n\nProperty not found\n\n\n\n\n\n\n\n\n{\n  \"entity\": {\n    \"id\": \"NyiBTYjTe\",\n    \"name\": \"Property name\",\n    \"description\": \"Property description\",\n    \"type\": \"text\"\n  }\n}\n\n\n\n\n\n\nGet the list of properties types.\n\n\nGET WEB_SERVICE_URL/publish/propertiesTypes\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the list of properties types\n\n\n\n\n\n\n\n\n{\n  \"types\": [\n    \"text\",\n    \"list\",\n    \"boolean\"\n  ]\n}\n\n\n\n\n\n\nAdd custom properties.\n\n\nPUT WEB_SERVICE_URL/publish/properties\n\n\n\nExpects an Array of objects containing:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe custom property name\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe custom property description\n\n\n\n\n\n\ntype\n\n\nString\n\n\nYes\n\n\n-\n\n\nThe custom property type (either \ntext\n, \nlist\n, or \nboolean\n)\n\n\n\n\n\n\nvalues\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe custom property values if type is \nlist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe properties have been added\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nWrong PUT parameters\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"entities\": [\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"list\",\n      \"values\": [\"value1\", \"value2\"]\n    },\n    ...\n  ]\n}\n\n\n\n\n\n\nUpdate a property.\n\n\nPOST WEB_SERVICE_URL/publish/properties/{property_id}\n\n\n\nWith \n{property_id}\n the id of the property to update.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe custom property name\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe custom property description\n\n\n\n\n\n\ntype\n\n\nString\n\n\nNo\n\n\n-\n\n\nThe custom property type (either \ntext\n, \nlist\n, or \nboolean\n)\n\n\n\n\n\n\nvalues\n\n\nArray\n\n\nNo\n\n\n-\n\n\nThe custom property values if type is \nlist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe property has been updated\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the property id\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 1\n}\n\n\n\n\n\n\nDelete properties.\n\n\nDELETE WEB_SERVICE_URL/publish/properties/{property_id}\n\n\n\nWith \n{property_id}\n a comma separated list of property ids to delete.\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nThe properties have been deleted\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n400\n\n\nMissing the property ids\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"total\": 42\n}\n\n\n\n\nPlatforms\n\n\nGet configured video platforms.\n\n\nGET WEB_SERVICE_URL/publish/platforms\n\n\n\n\n\n\n\n\n\nHTTP Status Code\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\n200\n\n\nGot the platforms\n\n\n\n\n\n\n500\n\n\nAn error occured on the server side\n\n\n\n\n\n\n401\n\n\nAuthentication to the web service failed\n\n\n\n\n\n\n403\n\n\nAuthorization forbidden for this end point\n\n\n\n\n\n\n\n\n{\n  \"platforms\": [\n    \"vimeo\",\n    \"youtube\",\n    \"local\",\n    \"tls\",\n    \"wowza\"\n  ]\n}",
            "title": "Web Service"
        },
        {
            "location": "/pluginsDevelopers/web-service/#introduction",
            "text": "OpenVeo Publish defines its own Web Service endpoints. Web Service authentication is documented in  OpenVeo  project.",
            "title": "Introduction"
        },
        {
            "location": "/pluginsDevelopers/web-service/#endpoints",
            "text": "",
            "title": "Endpoints"
        },
        {
            "location": "/pluginsDevelopers/web-service/#videos",
            "text": "Get videos.  GET WEB_SERVICE_URL/publish/videos     Name  Type  Required  Default  Details      query  String  No  -  To search on both videos title and description    states  String/Array  No  -  To filter videos by state    dateStart  String/Number  No  -  To get videos after or equal to a date (in any format supported by JavaScript Date object)    dateEnd  String/Number  No  -  To get videos before or equal to a date (in any format supported by JavaScript Date object)    categories  String/Array  No  -  To filter videos by category    groups  String/Array  No  -  To filter videos by group    user  String/Array  No  -  To filter videos by user    sortBy  String  No  date  To sort videos by either  title ,  description ,  date ,  state ,  views  or  category    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  To limit the number of videos per page    properties  Object  No  -  A list of custom properties with the property id as the key and the expected property value as the value (e.g.  properties[property1Id]=property1Value )  Date time  properties accept either timestamps or literal dates    include  Array  No  -  The list of fields to include from returned videos    exclude  Array  No  -  The list of fields to exclude from returned videos. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of videos    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\" : [\n    {\n      \"id\" : 1444396683105, // Id of the video\n      \"state\" : 12, // Video state\n      \"date\" : 1425916390000, // Date in timestamp\n      \"type\" : \"vimeo\", // Video associated platform\n      \"errorCode\" : -1, // Video error code or -1 if no error\n      \"category\" : \"\", // Video category\n      \"properties\" : { // Video custom properties\n        \"1444809111034\": { // Custom property id\n          \"id\" : 1444809111034, // Custom property id\n          \"name\" : \"Property name\", // Custom property name\n          \"description\" : \"Property description\", // Custom property description\n          \"type\" : \"text\", // Custom property type\n          \"value\" : \"Property value\" // Custom property value\n        }\n        ...\n      },\n      \"link\" : \"http://openveo.local/publish/video/1444396683105\", // Path to play the video\n      \"mediaId\" : \"141902178\", // Video id on video platform\n      \"available\" : true, // Indicates if video is available or is being encoded\n      \"thumbnail\" : \"http://openveo-cdn.local/1444396683105/thumbnail.jpg\",\n      \"title\" : \"Video title\",\n      \"leadParagraph\" : \"Video lead paragraph\",\n      \"description\" : \"Video description\",\n      \"chapters\" : [ // Chapters\n        {\n          \"name\" : \"Chapter 1\", // Chapter name\n          \"description\" : \"Chapter 1\", // Chapter description\n          \"value\" : 0.04 // Chapter timecode in percent (percentage of the video)\n        },\n        ...\n      ],\n      \"tags\" : [ // Tags\n        {\n          \"name\" : \"Tag 1\", // Tag name\n          \"description\" : \"Tag 1 description\", // Tag description\n          \"value\" : 0.3, // Tag timecode in percent (percentage of the video)\n          \"file\" : { // Tag associated file\n            \"mimetype\" : \"video/mp4\",\n            \"basePath\" : \"http://openveo-cdn.local/path/to/ressource/video.mp4\",\n            \"originalname\" : \"original-name.mp4\",\n            \"filename\" : \"name.mp4\",\n            \"size\" : 102458\n          }\n        },\n        ...\n      ],\n      \"cut\" : [ // Cut information (begin and end)\n        {\n          \"type\" : \"begin\", // Cut type\n          \"value\" : 0 // Begin timecode (percentage of the media)\n        },\n        {\n          \"type\" : \"end\", // Cut type\n          \"value\" : 0.9 // End timecode (percentage of the media)\n        }\n      ],\n      \"timecodes\" : [ // Video synchronized images\n        {\n          \"image\" : {\n            \"large\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg\", // Large image\n            \"small\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg?style=publish-thumb-200\" // Small image\n          },\n          \"timecode\" : 0 // Timecode when to display the image (in ms)\n        },\n        ...\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 0,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}  Videos can be in different states:   0  : The video is on error  1  : The video is waiting to be treated  2  : The video is copying  3  : The video package is extracting  4  : The video package is validating  5  : The video package is preparing  6  : The video is waiting for manual upload  7  : The video is uploading to the video platform  8  : The video is being configured on the video platform  9  : The video timecodes are being saved  10  : The video synchronized images are being saved  11  : The video is uploaded and ready but unpublished  12  : The video is uploaded, ready and published  13  : The video thumbnail is generated  14  : The video metadatas are being retrieved  15  : The video is defragmenting    Get a video.  GET WEB_SERVICE_URL/publish/videos/{video_id}     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned video    exclude  Array  No  -  The list of fields to exclude from returned video. Ignored if include is also specified        HTTP Status Code  Details      200  Got the video    500  An error occured on the server side    400  The id of the video is missing    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Video not found     {\n  \"entity\" : {\n    \"id\" : 1444396683105, // Id of the video\n    \"state\" : 12, // Video state\n    \"date\" : 1425916390000, // Date in timestamp\n    \"type\" : \"vimeo\", // Video associated platform\n    \"errorCode\" : -1, // Video error code or -1 if no error\n    \"category\" : \"\", // Video category\n    \"properties\" : { // Video custom properties\n      \"1444809111034\": { // Custom property id\n        \"id\" : 1444809111034, // Custom property id\n        \"name\" : \"Property name\", // Custom property name\n        \"description\" : \"Property description\", // Custom property description\n        \"type\" : \"text\", // Custom property type\n        \"value\" : \"Property value\" // Custom property value\n      },\n      ...\n    },\n    \"packageType\" : \"tar\", // Initialize package type (either tar or mp4)\n    \"link\" : \"http://openveo.local/publish/video/1444396683105\", // Path to play the video\n    \"mediaId\" : \"141902178\", // Video id on video platform\n    \"available\" : true, // Indicates if video is available or is being encoded\n    \"thumbnail\" : \"http://openveo-cdn.local//1444396683105/thumbnail.jpg\",\n    \"title\" : \"Video title\",\n    \"leadParagraph\" : \"Video lead paragraph\",\n    \"description\" : \"Video description\",\n    \"chapters\" : [ // Chapters\n      {\n        \"name\" : \"Chapter 1\", // Chapter name\n        \"description\" : \"Chapter 1\", // Chapter description\n        \"value\" : 0.04 // Chapter timecode in percent (percentage of the video)\n      },\n      ...\n    ],\n    \"tags\" : [ // Tags\n      {\n        \"name\" : \"Tag 1\", // Tag name\n        \"description\" : \"Tag 1 description\", // Tag description\n        \"value\" : 0.3, // Tag timecode in percent (percentage of the video)\n        \"file\" : { // Tag associated file\n          \"mimetype\" : \"video/mp4\",\n          \"basePath\" : \"http://openveo-cdn.local/path/to/ressource/video.mp4\",\n          \"originalname\" : \"original-name.mp4\",\n          \"filename\" : \"name.mp4\",\n          \"size\" : 102458\n        }\n      },\n      ...\n    ],\n    \"cut\" : [ // Cut information (begin and end)\n      {\n        \"type\" : \"begin\", // Cut type\n        \"value\" : 0 // Begin timecode (percentage of the media)\n      },\n      {\n        \"type\" : \"end\", // Cut type\n        \"value\" : 0.9 // End timecode (percentage of the media)\n      }\n    ],\n    \"timecodes\" : [ // Video synchronized images\n      {\n        \"image\" : {\n          \"large\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg\", // Large image\n          \"small\" : \"http://openveo-cdn.local/1440175380631/slide_00000.jpeg?style=publish-thumb-200\" // Small image\n        },\n        \"timecode\" : 0 // Timecode when to display the image (in ms)\n      },\n      ...\n    ]\n  }\n}   Delete videos.  DELETE WEB_SERVICE_URL/publish/videos/{video_id}  With  {video_id}  a comma separated list of video ids to delete.     HTTP Status Code  Details      200  The videos have been deleted    500  An error occured on the server side    400  Missing the video ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}   Add video.  POST WEB_SERVICE_URL/publish/videos  Expects a multipart/form-data body containing:     Name  Type  Required  Default  Details      file  File  Yes  -  The video file    thumbnail  File  No  -  The video thumbnail    info  Object  Yes  -  The video metadata    info.title  String  Yes  -  The video title    info.properties  Object  No  -  The custom properties of the video with the keys as custom property ids and values as custom property values    info.category  String  No  -  The id of the category the video belongs to    info.date  String  No  -  The date of the video (in any format supported by JavaScript Date object)    info.leadParagraph  String  No  -  The video lead paragraph    info.description  String  No  -  The video description    info.groups  Array  No  -  The list of content groups (ids) the video belongs to    info.platform  String  No  -  The platform to upload the file to. If no platform is specified the video will be in \" Waiting for upload \" state. Platform could be one of the platforms defined in  videoPlatformConf.json  configuration file (either  vimeo ,  wowza ,  youtube  or  local )        HTTP Status Code  Details      200  The video has been added    500  An error occured on the server side    400  Missing body    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"id\": 42\n}   Publish videos.  POST WEB_SERVICE_URL/publish/videos/{video_id}/publish  With  {video_id}  a comma separated list of video ids to publish.     HTTP Status Code  Details      200  The videos have been published    500  An error occured on the server side    400  Missing the video ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}   Unpublish videos.  POST WEB_SERVICE_URL/publish/videos/{video_id}/unpublish  With  {video_id}  a comma separated list of video ids to unpublish.     HTTP Status Code  Details      200  The videos have been unpublished    500  An error occured on the server side    400  Missing the video ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Videos"
        },
        {
            "location": "/pluginsDevelopers/web-service/#properties",
            "text": "Get custom properties.  GET WEB_SERVICE_URL/publish/properties     Name  Type  Required  Default  Details      query  String  No  -  To search on both properties name and description    types  String/Array  No  -  To filter properties by type    sortBy  String  No  name  To sort properties by either  name  or  description    sortOrder  String  No  desc  Sort order (either  asc  or  desc )    page  Number  No  0  The expected page    limit  Number  No  10  To limit the number of properties per page    include  Array  No  -  The list of fields to include from returned properties    exclude  Array  No  -  The list of fields to exclude from returned properties. Ignored if include is also specified        HTTP Status Code  Details      200  Got the list of properties    500  An error occured on the server side    400  Wrong list of parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"text\"\n    },\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"list\",\n      \"values\": [\"value1\", \"value2\"]\n    }\n  ],\n  \"pagination\": {\n    \"limit\": 1,\n    \"page\": 0,\n    \"pages\": 2,\n    \"size\": 2\n  }\n}   Get a property.  GET WEB_SERVICE_URL/publish/properties/{property_id}  With  {property_id}  the id of the property to retrieve.     Name  Type  Required  Default  Details      include  Array  No  -  The list of fields to include from returned property    exclude  Array  No  -  The list of fields to exclude from returned property. Ignored if include is also specified        HTTP Status Code  Details      200  Got the property    500  An error occured on the server side    400  The id of the property is missing    401  Authentication to the web service failed    403  Authorization forbidden for this end point    404  Property not found     {\n  \"entity\": {\n    \"id\": \"NyiBTYjTe\",\n    \"name\": \"Property name\",\n    \"description\": \"Property description\",\n    \"type\": \"text\"\n  }\n}   Get the list of properties types.  GET WEB_SERVICE_URL/publish/propertiesTypes     HTTP Status Code  Details      200  Got the list of properties types     {\n  \"types\": [\n    \"text\",\n    \"list\",\n    \"boolean\"\n  ]\n}   Add custom properties.  PUT WEB_SERVICE_URL/publish/properties  Expects an Array of objects containing:     Name  Type  Required  Default  Details      name  String  Yes  -  The custom property name    description  String  Yes  -  The custom property description    type  String  Yes  -  The custom property type (either  text ,  list , or  boolean )    values  Array  No  -  The custom property values if type is  list        HTTP Status Code  Details      200  The properties have been added    500  An error occured on the server side    400  Wrong PUT parameters    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"entities\": [\n    {\n      \"id\": \"4JMy6htjpe\",\n      \"name\": \"Property name\",\n      \"description\": \"Property description\",\n      \"type\": \"list\",\n      \"values\": [\"value1\", \"value2\"]\n    },\n    ...\n  ]\n}   Update a property.  POST WEB_SERVICE_URL/publish/properties/{property_id}  With  {property_id}  the id of the property to update.     Name  Type  Required  Default  Details      name  String  No  -  The custom property name    description  String  No  -  The custom property description    type  String  No  -  The custom property type (either  text ,  list , or  boolean )    values  Array  No  -  The custom property values if type is  list        HTTP Status Code  Details      200  The property has been updated    500  An error occured on the server side    400  Missing the property id    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 1\n}   Delete properties.  DELETE WEB_SERVICE_URL/publish/properties/{property_id}  With  {property_id}  a comma separated list of property ids to delete.     HTTP Status Code  Details      200  The properties have been deleted    500  An error occured on the server side    400  Missing the property ids    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"total\": 42\n}",
            "title": "Properties"
        },
        {
            "location": "/pluginsDevelopers/web-service/#platforms",
            "text": "Get configured video platforms.  GET WEB_SERVICE_URL/publish/platforms     HTTP Status Code  Details      200  Got the platforms    500  An error occured on the server side    401  Authentication to the web service failed    403  Authorization forbidden for this end point     {\n  \"platforms\": [\n    \"vimeo\",\n    \"youtube\",\n    \"local\",\n    \"tls\",\n    \"wowza\"\n  ]\n}",
            "title": "Platforms"
        },
        {
            "location": "/pluginsDevelopers/api/",
            "text": "Server side API (Node.js)\n\n\nActually, OpenVeo Publish does not expose any server side APIs.\n\n\nBackend client side API (AngularJS)\n\n\nOpenVeo Publish \nbackend API\n exposes an API (AngularJS components) to be used by other plugins.",
            "title": "API"
        },
        {
            "location": "/pluginsDevelopers/api/#server-side-api-nodejs",
            "text": "Actually, OpenVeo Publish does not expose any server side APIs.",
            "title": "Server side API (Node.js)"
        },
        {
            "location": "/pluginsDevelopers/api/#backend-client-side-api-angularjs",
            "text": "OpenVeo Publish  backend API  exposes an API (AngularJS components) to be used by other plugins.",
            "title": "Backend client side API (AngularJS)"
        },
        {
            "location": "/developers/basics/",
            "text": "Player\n\n\nPublish uses \nOpenVeo Player\n to play a video with images synchronization.\n\n\nEntities\n\n\nPublish defines new entities:\n\n\n\n\nproperties\n - Custom properties for videos\n\n\nvideos\n - Videos",
            "title": "Basics"
        },
        {
            "location": "/developers/basics/#player",
            "text": "Publish uses  OpenVeo Player  to play a video with images synchronization.",
            "title": "Player"
        },
        {
            "location": "/developers/basics/#entities",
            "text": "Publish defines new entities:   properties  - Custom properties for videos  videos  - Videos",
            "title": "Entities"
        },
        {
            "location": "/developers/installation/",
            "text": "Installation\n\n\nTo install OpenVeo Publish you first need to install OpenVeo Core if not already done.\n\n\nOpenVeo Core\n\n\nInstall @openveo/core package\n\n\n# Move to your workspace directory\ncd /WORKSPACE_PATH\n\n# Create directory for OpenVeo core\nmkdir openveo-core\n\n# Install OpenVeo core in this directory\n# See OpenVeo core documentation for more information\n\n\n\nYour workspace should look like this:\n\n\n.\n\u251c\u2500\u2500 openveo-core\n\n\n\n\nCreate NPM links for openveo-api and openveo-test\n\n\nIn a classical NPM project @openveo/publish package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/publish. For development, the first thing which comes to mind is to create a clone of the OpenVeo Publish project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time.\n\n\nWe use \nNPM links\n to deal with this problem and store OpenVeo Publish inside /WORKSPACE_PATH/openveo-publish. But there is a catch. OpenVeo Publish needs both @openveo/api and @openveo/test of the core. As packages @openveo/publish and @openveo/core are installed in two different locations, package @openveo/publish won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/publish.\n\n\n# Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test\nnpm link\n\n\n\nOpenVeo Publish\n\n\nClone project from git\n\n\n# Clone project into workspace\ncd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-publish.git\n\n\n\nYour workspace should look like this:\n\n\n.\n\u251c\u2500\u2500 openveo-core\n\u251c\u2500\u2500 openveo-publish\n\n\n\n\nLink openveo-api and openveo-test\n\n\nWhen installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links.\n\n\n# Install dependencies @openveo/api and @openveo/test using NPM links\ncd /WORKSPACE_PATH/openveo-publish\nnpm link @openveo/api\nnpm link @openveo/test\n\n\n\nInstall project's dependencies\n\n\ncd /WORKSPACE_PATH/openveo-publish\nnpm install\n\n\n\nInstall plugin\n\n\nTo be able to install @openveo/publish in @openveo/core we create an NPM link of @openveo/publish and refer to it in the core.\n\n\nCreate an NPM link\n\n\n# Create a link for @openveo/publish\ncd /WORKSPACE_PATH/openveo-publish\nnpm link\n\n\n\nLink project to the core\n\n\n# Install dependency @openveo/publish using NPM links\ncd /WORKSPACE_PATH/openveo-core\nnpm link @openveo/publish",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#installation",
            "text": "To install OpenVeo Publish you first need to install OpenVeo Core if not already done.",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#openveo-core",
            "text": "",
            "title": "OpenVeo Core"
        },
        {
            "location": "/developers/installation/#install-openveocore-package",
            "text": "# Move to your workspace directory\ncd /WORKSPACE_PATH\n\n# Create directory for OpenVeo core\nmkdir openveo-core\n\n# Install OpenVeo core in this directory\n# See OpenVeo core documentation for more information  Your workspace should look like this:  .\n\u251c\u2500\u2500 openveo-core",
            "title": "Install @openveo/core package"
        },
        {
            "location": "/developers/installation/#create-npm-links-for-openveo-api-and-openveo-test",
            "text": "In a classical NPM project @openveo/publish package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/publish. For development, the first thing which comes to mind is to create a clone of the OpenVeo Publish project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time.  We use  NPM links  to deal with this problem and store OpenVeo Publish inside /WORKSPACE_PATH/openveo-publish. But there is a catch. OpenVeo Publish needs both @openveo/api and @openveo/test of the core. As packages @openveo/publish and @openveo/core are installed in two different locations, package @openveo/publish won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/publish.  # Create a link for @openveo/api\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api\nnpm link\n\n# Create a link for @openveo/test\ncd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test\nnpm link",
            "title": "Create NPM links for openveo-api and openveo-test"
        },
        {
            "location": "/developers/installation/#openveo-publish",
            "text": "",
            "title": "OpenVeo Publish"
        },
        {
            "location": "/developers/installation/#clone-project-from-git",
            "text": "# Clone project into workspace\ncd /WORKSPACE_PATH/\ngit clone git@github.com:veo-labs/openveo-publish.git  Your workspace should look like this:  .\n\u251c\u2500\u2500 openveo-core\n\u251c\u2500\u2500 openveo-publish",
            "title": "Clone project from git"
        },
        {
            "location": "/developers/installation/#link-openveo-api-and-openveo-test",
            "text": "When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links.  # Install dependencies @openveo/api and @openveo/test using NPM links\ncd /WORKSPACE_PATH/openveo-publish\nnpm link @openveo/api\nnpm link @openveo/test",
            "title": "Link openveo-api and openveo-test"
        },
        {
            "location": "/developers/installation/#install-projects-dependencies",
            "text": "cd /WORKSPACE_PATH/openveo-publish\nnpm install",
            "title": "Install project's dependencies"
        },
        {
            "location": "/developers/installation/#install-plugin",
            "text": "To be able to install @openveo/publish in @openveo/core we create an NPM link of @openveo/publish and refer to it in the core.",
            "title": "Install plugin"
        },
        {
            "location": "/developers/installation/#create-an-npm-link",
            "text": "# Create a link for @openveo/publish\ncd /WORKSPACE_PATH/openveo-publish\nnpm link",
            "title": "Create an NPM link"
        },
        {
            "location": "/developers/installation/#link-project-to-the-core",
            "text": "# Install dependency @openveo/publish using NPM links\ncd /WORKSPACE_PATH/openveo-core\nnpm link @openveo/publish",
            "title": "Link project to the core"
        },
        {
            "location": "/developers/back-end/",
            "text": "Introduction\n\n\nPublish back end pages are loaded by \nOpenVeo\n.\n\n\nAs expected by OpenVeo, Publish defines an AngularJS module \nov.publish\n.\n\n\nModules\n\n\nMain module (\nov.publish\n)\n\n\nPublish main module defines the following routes:\n\n\n\n\n/publish/medias-list\n to access the catalogue page\n\n\n/publish/media/:mediaId\n to access media edition page\n\n\n/publish/properties-list\n to access custom properties page\n\n\n/publish/categories-list\n to access categories page\n\n\n/publish/configuration\n to access publish configuration page\n\n\n\n\nNb:\n Available services / filters defined in \nov.publish\n module are described in the \nAPI\n.",
            "title": "Back end AngularJS"
        },
        {
            "location": "/developers/back-end/#introduction",
            "text": "Publish back end pages are loaded by  OpenVeo .  As expected by OpenVeo, Publish defines an AngularJS module  ov.publish .",
            "title": "Introduction"
        },
        {
            "location": "/developers/back-end/#modules",
            "text": "",
            "title": "Modules"
        },
        {
            "location": "/developers/back-end/#main-module-ovpublish",
            "text": "Publish main module defines the following routes:   /publish/medias-list  to access the catalogue page  /publish/media/:mediaId  to access media edition page  /publish/properties-list  to access custom properties page  /publish/categories-list  to access categories page  /publish/configuration  to access publish configuration page   Nb:  Available services / filters defined in  ov.publish  module are described in the  API .",
            "title": "Main module (ov.publish)"
        },
        {
            "location": "/developers/compilation/",
            "text": "Introduction\n\n\nOpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.\n\n\nOpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files.\n\n\nCompiling SASS files\n\n\nYou can compile the back end SASS files using the following command:\n\n\ngrunt compass:dist\n\n\n\nOr you can watch SASS files changes using the following command:\n\n\ngrunt\n\n\n\nCompiling JavaScript files\n\n\nYou'll probably want to compile AngularJS files, in production, for better performance. You can do it using:\n\n\ngrunt prod",
            "title": "CSS / SASS / JS compilation"
        },
        {
            "location": "/developers/compilation/#introduction",
            "text": "OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.  OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Publish have to compile his own SASS and JavaScript files.",
            "title": "Introduction"
        },
        {
            "location": "/developers/compilation/#compiling-sass-files",
            "text": "You can compile the back end SASS files using the following command:  grunt compass:dist  Or you can watch SASS files changes using the following command:  grunt",
            "title": "Compiling SASS files"
        },
        {
            "location": "/developers/compilation/#compiling-javascript-files",
            "text": "You'll probably want to compile AngularJS files, in production, for better performance. You can do it using:  grunt prod",
            "title": "Compiling JavaScript files"
        },
        {
            "location": "/developers/unit-tests/",
            "text": "Node.js unit tests\n\n\nServer side unit tests are performed using \nMocha\n and \nChai\n. You can launch server unit tests with the following command:\n\n\ngrunt mochaTest\n\n\n\nAngularJS unit tests\n\n\nClient side unit tests are performed using \nKarma\n. You can launch client unit tests with the following command:\n\n\ngrunt karma",
            "title": "Unit tests"
        },
        {
            "location": "/developers/unit-tests/#nodejs-unit-tests",
            "text": "Server side unit tests are performed using  Mocha  and  Chai . You can launch server unit tests with the following command:  grunt mochaTest",
            "title": "Node.js unit tests"
        },
        {
            "location": "/developers/unit-tests/#angularjs-unit-tests",
            "text": "Client side unit tests are performed using  Karma . You can launch client unit tests with the following command:  grunt karma",
            "title": "AngularJS unit tests"
        },
        {
            "location": "/developers/end-to-end-tests/",
            "text": "Introduction\n\n\nEnd to end tests are performed using \nProtractor\n and run from \nOpenVeo core\n.\n\n\nYou first have to install and configure tests as described in core's documentation.\n\n\nWrite tests\n\n\nAll end to end tests are located in \ntests/client/e2eTests/\n. Suites are described in \ntests/client/protractorSuites.json\n. And the list of datas to create before launching tests are available in \ntests/client/e2eTests/database/data.json\n\n\nLaunch publish end to end tests\n\n\n# Launch all publish end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"publish\"\n\n# Launch all publish end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true --suite=\"publish\"",
            "title": "End to end tests"
        },
        {
            "location": "/developers/end-to-end-tests/#introduction",
            "text": "End to end tests are performed using  Protractor  and run from  OpenVeo core .  You first have to install and configure tests as described in core's documentation.",
            "title": "Introduction"
        },
        {
            "location": "/developers/end-to-end-tests/#write-tests",
            "text": "All end to end tests are located in  tests/client/e2eTests/ . Suites are described in  tests/client/protractorSuites.json . And the list of datas to create before launching tests are available in  tests/client/e2eTests/database/data.json",
            "title": "Write tests"
        },
        {
            "location": "/developers/end-to-end-tests/#launch-publish-end-to-end-tests",
            "text": "# Launch all publish end to end tests on chrome\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"chrome\\\"}\" --directConnect=true --suite=\"publish\"\n\n# Launch all publish end to end tests on firefox\ngrunt test-e2e --capabilities=\"{\\\"browserName\\\": \\\"firefox\\\"}\" --directConnect=true --suite=\"publish\"",
            "title": "Launch publish end to end tests"
        },
        {
            "location": "/developers/api/",
            "text": "Server side API (Node.js)\n\n\nYou can find Publish Plugin API \nhere\n.\n\n\nBackend client side API (AngularJS)\n\n\nOpenVeo Publish \nbackend API\n exposes an API (AngularJS components) to be used by other plugins.",
            "title": "API"
        },
        {
            "location": "/developers/api/#server-side-api-nodejs",
            "text": "You can find Publish Plugin API  here .",
            "title": "Server side API (Node.js)"
        },
        {
            "location": "/developers/api/#backend-client-side-api-angularjs",
            "text": "OpenVeo Publish  backend API  exposes an API (AngularJS components) to be used by other plugins.",
            "title": "Backend client side API (AngularJS)"
        }
    ]
}