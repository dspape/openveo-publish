{
    "project": {
        "name": "OpenVeo Publish server",
        "description": "Node.js OpenVeo Publish plugin documentation",
        "version": "5.1.0"
    },
    "files": {
        "app/server/controllers/ConfigurationController.js": {
            "name": "app/server/controllers/ConfigurationController.js",
            "modules": {},
            "classes": {
                "ConfigurationController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/PropertyController.js": {
            "name": "app/server/controllers/PropertyController.js",
            "modules": {},
            "classes": {
                "PropertyController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/StatisticsController.js": {
            "name": "app/server/controllers/StatisticsController.js",
            "modules": {},
            "classes": {
                "StatisticsController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/VideoController.js": {
            "name": "app/server/controllers/VideoController.js",
            "modules": {},
            "classes": {
                "VideoController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/doc.js": {
            "name": "app/server/controllers/doc.js",
            "modules": {
                "controllers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/controllers/httpErrors.js": {
            "name": "app/server/controllers/httpErrors.js",
            "modules": {},
            "classes": {
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/models/ConfigurationModel.js": {
            "name": "app/server/models/ConfigurationModel.js",
            "modules": {},
            "classes": {
                "ConfigurationModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/models/PropertyModel.js": {
            "name": "app/server/models/PropertyModel.js",
            "modules": {},
            "classes": {
                "PropertyModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/models/VideoModel.js": {
            "name": "app/server/models/VideoModel.js",
            "modules": {},
            "classes": {
                "VideoModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/models/doc.js": {
            "name": "app/server/models/doc.js",
            "modules": {
                "models": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/Package.js": {
            "name": "app/server/packages/Package.js",
            "modules": {},
            "classes": {
                "Package": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/PackageError.js": {
            "name": "app/server/packages/PackageError.js",
            "modules": {},
            "classes": {
                "PackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/TarPackage.js": {
            "name": "app/server/packages/TarPackage.js",
            "modules": {},
            "classes": {
                "TarPackage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/TarPackageError.js": {
            "name": "app/server/packages/TarPackageError.js",
            "modules": {},
            "classes": {
                "TarPackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/VideoPackage.js": {
            "name": "app/server/packages/VideoPackage.js",
            "modules": {},
            "classes": {
                "VideoPackage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/VideoPackageError.js": {
            "name": "app/server/packages/VideoPackageError.js",
            "modules": {},
            "classes": {
                "VideoPackageError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/doc.js": {
            "name": "app/server/packages/doc.js",
            "modules": {
                "packages": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/errors.js": {
            "name": "app/server/packages/errors.js",
            "modules": {},
            "classes": {
                "ERRORS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/packageFactory.js": {
            "name": "app/server/packages/packageFactory.js",
            "modules": {},
            "classes": {
                "factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/packages/states.js": {
            "name": "app/server/packages/states.js",
            "modules": {},
            "classes": {
                "STATES": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js": {
            "name": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "modules": {},
            "classes": {
                "GoogleOAuthHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js": {
            "name": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "modules": {},
            "classes": {
                "YoutubeProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js": {
            "name": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "modules": {},
            "classes": {
                "ResumableUpload": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/LocalProvider.js": {
            "name": "app/server/providers/videoPlatforms/LocalProvider.js",
            "modules": {},
            "classes": {
                "LocalProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/VideoPlatformProvider.js": {
            "name": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "modules": {},
            "classes": {
                "VideoPlatformProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/VimeoProvider.js": {
            "name": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "modules": {},
            "classes": {
                "VimeoProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/WowzaProvider.js": {
            "name": "app/server/providers/videoPlatforms/WowzaProvider.js",
            "modules": {},
            "classes": {
                "WowzaProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/factory.js": {
            "name": "app/server/providers/videoPlatforms/factory.js",
            "modules": {},
            "classes": {
                "videoPlatformFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/videoPlatforms/types.js": {
            "name": "app/server/providers/videoPlatforms/types.js",
            "modules": {},
            "classes": {
                "TYPES": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/ConfigurationProvider.js": {
            "name": "app/server/providers/ConfigurationProvider.js",
            "modules": {},
            "classes": {
                "ConfigurationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/PropertyProvider.js": {
            "name": "app/server/providers/PropertyProvider.js",
            "modules": {},
            "classes": {
                "PropertyProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/VideoProvider.js": {
            "name": "app/server/providers/VideoProvider.js",
            "modules": {},
            "classes": {
                "VideoProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/providers/doc.js": {
            "name": "app/server/providers/doc.js",
            "modules": {
                "providers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/DirectoryFsWatcher.js": {
            "name": "app/server/watcher/DirectoryFsWatcher.js",
            "modules": {},
            "classes": {
                "DirectoryFsWatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/DirectoryWatcher.js": {
            "name": "app/server/watcher/DirectoryWatcher.js",
            "modules": {},
            "classes": {
                "DirectoryWatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/Watcher.js": {
            "name": "app/server/watcher/Watcher.js",
            "modules": {},
            "classes": {
                "Watcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/WatcherError.js": {
            "name": "app/server/watcher/WatcherError.js",
            "modules": {},
            "classes": {
                "WatcherError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/watcher/doc.js": {
            "name": "app/server/watcher/doc.js",
            "modules": {
                "watcher": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishError.js": {
            "name": "app/server/PublishError.js",
            "modules": {},
            "classes": {
                "PublishError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishManager.js": {
            "name": "app/server/PublishManager.js",
            "modules": {},
            "classes": {
                "PublishManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/PublishPlugin.js": {
            "name": "app/server/PublishPlugin.js",
            "modules": {
                "publish": 1
            },
            "classes": {
                "PublishPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/server/listener.js": {
            "name": "app/server/listener.js",
            "modules": {},
            "classes": {
                "listener": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "controllers": {
            "name": "controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "ConfigurationController": 1,
                "PropertyController": 1,
                "StatisticsController": 1,
                "VideoController": 1,
                "HTTP_ERRORS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/controllers/httpErrors.js",
            "line": 7,
            "description": "Include all plugin's controllers to handle HTTP or socket messages.",
            "itemtype": "main"
        },
        "models": {
            "name": "models",
            "submodules": {},
            "elements": {},
            "classes": {
                "ConfigurationModel": 1,
                "PropertyModel": 1,
                "VideoModel": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/models/VideoModel.js",
            "line": 23,
            "description": "Publish models.",
            "itemtype": "main"
        },
        "packages": {
            "name": "packages",
            "submodules": {},
            "elements": {},
            "classes": {
                "Package": 1,
                "PackageError": 1,
                "TarPackage": 1,
                "TarPackageError": 1,
                "VideoPackage": 1,
                "VideoPackageError": 1,
                "ERRORS": 1,
                "factory": 1,
                "STATES": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/packages/states.js",
            "line": 7,
            "description": "All packages types which can be processed.",
            "itemtype": "main"
        },
        "providers": {
            "name": "providers",
            "submodules": {},
            "elements": {},
            "classes": {
                "GoogleOAuthHelper": 1,
                "YoutubeProvider": 1,
                "ResumableUpload": 1,
                "LocalProvider": 1,
                "VideoPlatformProvider": 1,
                "VimeoProvider": 1,
                "WowzaProvider": 1,
                "videoPlatformFactory": 1,
                "TYPES": 1,
                "ConfigurationProvider": 1,
                "PropertyProvider": 1,
                "VideoProvider": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/providers/VideoProvider.js",
            "line": 10,
            "description": "All publish providers.",
            "itemtype": "main"
        },
        "watcher": {
            "name": "watcher",
            "submodules": {},
            "elements": {},
            "classes": {
                "DirectoryFsWatcher": 1,
                "DirectoryWatcher": 1,
                "Watcher": 1,
                "WatcherError": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/watcher/WatcherError.js",
            "line": 9,
            "description": "Defines a Watcher to be aware of new resources added to directories.",
            "itemtype": "main"
        },
        "publish": {
            "name": "publish",
            "submodules": {},
            "elements": {},
            "classes": {
                "PublishError": 1,
                "PublishManager": 1,
                "PublishPlugin": 1,
                "listener": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "app/server/listener.js",
            "line": 14,
            "description": "Defines the Publish Plugin that will be loaded by the core application.",
            "itemtype": "main"
        }
    },
    "classes": {
        "ConfigurationController": {
            "name": "ConfigurationController",
            "shortname": "ConfigurationController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 19,
            "description": "Defines a controller to handle actions relative to configuration's routes.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "PropertyController": {
            "name": "PropertyController",
            "shortname": "PropertyController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/PropertyController.js",
            "line": 15,
            "description": "Defines a controller to handle actions relative to properties' routes.",
            "extends": "EntityController",
            "is_constructor": 1
        },
        "StatisticsController": {
            "name": "StatisticsController",
            "shortname": "StatisticsController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/StatisticsController.js",
            "line": 15,
            "description": "Defines a controller to handle actions relative to statistics' routes.",
            "extends": "Controller",
            "is_constructor": 1
        },
        "VideoController": {
            "name": "VideoController",
            "shortname": "VideoController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/VideoController.js",
            "line": 29,
            "description": "Defines a controller to handle actions relative to videos' routes.",
            "extends": "ContentController",
            "is_constructor": 1
        },
        "HTTP_ERRORS": {
            "name": "HTTP_ERRORS",
            "shortname": "HTTP_ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controllers",
            "namespace": "",
            "file": "app/server/controllers/httpErrors.js",
            "line": 7,
            "description": "The list of HTTP errors with, for each error, its associated\nhexadecimal code and HTTP return code.\nHTTP errors are sent by controllers.",
            "example": [
                "\n    var HTTP_ERRORS = process.requirePublish('app/server/controllers/httpErrors.js');\n    console.log(HTTP_ERRORS.UNKNOWN_ERROR);"
            ],
            "static": 1
        },
        "ConfigurationModel": {
            "name": "ConfigurationModel",
            "shortname": "ConfigurationModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "models",
            "namespace": "",
            "file": "app/server/models/ConfigurationModel.js",
            "line": 10,
            "description": "Defines a ConfigurationModel to manipulate configurations.",
            "extends": "EntityModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider",
                    "type": "ConfigurationProvider"
                }
            ]
        },
        "PropertyModel": {
            "name": "PropertyModel",
            "shortname": "PropertyModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "models",
            "namespace": "",
            "file": "app/server/models/PropertyModel.js",
            "line": 12,
            "description": "Defines a PropertyModel to manipulate properties' entities.",
            "extends": "EntityModel",
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The entity provider",
                    "type": "PropertyProvider"
                },
                {
                    "name": "videoProvider",
                    "description": "The video provider",
                    "type": "VideoProvider"
                }
            ]
        },
        "VideoModel": {
            "name": "VideoModel",
            "shortname": "VideoModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "models",
            "namespace": "",
            "file": "app/server/models/VideoModel.js",
            "line": 23,
            "description": "Defines a VideoModel to manipulate videos' entities.",
            "extends": "ContentModel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "user",
                    "description": "The user the video belongs to",
                    "type": "Object"
                },
                {
                    "name": "videoProvider",
                    "description": "The video provider",
                    "type": "VideoProvider"
                },
                {
                    "name": "propertyProvider",
                    "description": "The entity provider",
                    "type": "PropertyProvider"
                }
            ]
        },
        "Package": {
            "name": "Package",
            "shortname": "Package",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/Package.js",
            "line": 43,
            "description": "Defines a Package to manage publication of a media file.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Information about the media",
                    "type": "Object"
                },
                {
                    "name": "videoModel",
                    "description": "A video model",
                    "type": "VideoModel"
                },
                {
                    "name": "configurationModel",
                    "description": "A configuration model",
                    "type": "ConfigurationModel"
                }
            ]
        },
        "PackageError": {
            "name": "PackageError",
            "shortname": "PackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/PackageError.js",
            "line": 9,
            "description": "Defines an error occurring in a package's processing.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "TarPackage": {
            "name": "TarPackage",
            "shortname": "TarPackage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/TarPackage.js",
            "line": 21,
            "description": "Defines a TarPackage to manage publication of a tar file.\n\nA tar file may contain :\n - A video file\n - A list of image files\n - A .session file describing the package content",
            "example": [
                "\n    // tar package object example\n    {\n      \"id\": \"13465465\", // Id of the package\n      \"type\": \"vimeo\", // Platform type\n      \"title\": \"2015-03-09_16-53-10_rich-media\", // Package title\n      \"originalPackagePath\": \"/tmp/2015-03-09_16-53-10_rich-media.tar\" // Package file\n    }",
                "\n    // \".session\" file example contained in a tar package\n    {\n      \"date\": 1425916390, // Unix epoch time of the video record\n      \"rich-media\": true, // true if package contains presentation images\n      \"filename\": \"video.mp4\", // The name of the video file in the package\n      \"duration\": 30, // Duration of the video in seconds\n      \"indexes\": [ // The list of indexes in the video\n        {\n          \"type\": \"image\", // Index type (could be \"image\" or \"tag\")\n          \"timecode\": 0, // Index time (in ms) from the beginning of the video\n          \"data\": { // Index data (only for \"image\" type)\n            \"filename\": \"slide_00000.jpeg\" // The name of the image file in the tar\n          }\n        },\n        {\n          \"type\": \"tag\", // Index type (could be \"image\" or \"tag\")\n          \"timecode\": 3208 // Index time (in ms) from the beginning of the video\n        },\n        ...\n      ]\n    }"
            ],
            "extends": "Package",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media description object",
                    "type": "Object"
                },
                {
                    "name": "videoModel",
                    "description": "A video model",
                    "type": "VideoModel"
                },
                {
                    "name": "configurationModel",
                    "description": "A configuration model",
                    "type": "ConfigurationModel"
                }
            ]
        },
        "TarPackageError": {
            "name": "TarPackageError",
            "shortname": "TarPackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/TarPackageError.js",
            "line": 10,
            "description": "Defines an error occurring in a tar package's processing.",
            "extends": "PackageError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "VideoPackage": {
            "name": "VideoPackage",
            "shortname": "VideoPackage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/VideoPackage.js",
            "line": 25,
            "description": "Defines a VideoPackage to manage publication of a video file.",
            "extends": "Package",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Information about the video",
                    "type": "Object"
                },
                {
                    "name": "videoModel",
                    "description": "A video model",
                    "type": "VideoModel"
                },
                {
                    "name": "configurationModel",
                    "description": "A configuration model",
                    "type": "ConfigurationModel"
                }
            ]
        },
        "VideoPackageError": {
            "name": "VideoPackageError",
            "shortname": "VideoPackageError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/VideoPackageError.js",
            "line": 10,
            "description": "Defines an error occurring in a video package's processing.",
            "extends": "PackageError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "ERRORS": {
            "name": "ERRORS",
            "shortname": "ERRORS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/errors.js",
            "line": 7,
            "description": "Defines the list of package publication errors.",
            "static": 1
        },
        "factory": {
            "name": "factory",
            "shortname": "factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/packageFactory.js",
            "line": 7,
            "description": "Defines the package factory.",
            "static": 1
        },
        "STATES": {
            "name": "STATES",
            "shortname": "STATES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "packages",
            "namespace": "",
            "file": "app/server/packages/states.js",
            "line": 7,
            "description": "Defines the list of package publication states.",
            "static": 1
        },
        "GoogleOAuthHelper": {
            "name": "GoogleOAuthHelper",
            "shortname": "GoogleOAuthHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 16,
            "description": "Defines an helper for google OAuth association and requests.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "configurationModel",
                    "description": "The configuration model to use store / update / delete\nGoogle API authentication",
                    "type": "ConfigurationModel"
                }
            ],
            "throws": {
                "description": "If configuration is missing",
                "type": "TypeError"
            }
        },
        "YoutubeProvider": {
            "name": "YoutubeProvider",
            "shortname": "YoutubeProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 40,
            "description": "Defines a YoutubeProvider class to interact with [youtube platform](https://youtube.com/).",
            "extends": "VideoPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A youtube configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "uploadMethod",
                            "description": "The upload method to use (see UPLOAD_METHODS)",
                            "type": "String"
                        },
                        {
                            "name": "privacy",
                            "description": "The media privacy on Youtube (see PRIVACY_STATUSES)",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "googleOAuthHelper",
                    "description": "The Google OAuth helper",
                    "type": "GoogleOAuthHelper"
                }
            ]
        },
        "ResumableUpload": {
            "name": "ResumableUpload",
            "shortname": "ResumableUpload",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 13,
            "description": "TODO",
            "is_constructor": 1
        },
        "LocalProvider": {
            "name": "LocalProvider",
            "shortname": "LocalProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/LocalProvider.js",
            "line": 14,
            "description": "Defines a LocalProvider class to interact with local platform.",
            "extends": "VideoPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A local configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "vodFilePath",
                            "description": "TODO",
                            "type": "String"
                        },
                        {
                            "name": "streamPath",
                            "description": "TODO",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "VideoPlatformProvider": {
            "name": "VideoPlatformProvider",
            "shortname": "VideoPlatformProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 10,
            "description": "Defines a VideoPlatformProvider to interact with video\nplatforms. Use videoPlatformFactory to get an instance of the\nappropriate VideoPlatformProvider.",
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A video platform configuration object\nit's structure depend on the provider's type, see extended objects\nfor more information",
                    "type": "Object"
                }
            ]
        },
        "VimeoProvider": {
            "name": "VimeoProvider",
            "shortname": "VimeoProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 14,
            "description": "Defines a VimeoProvider class to interact with [vimeo platform](https://vimeo.com/).",
            "extends": "VideoPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A vimeo configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "Vimeo client id",
                            "type": "String"
                        },
                        {
                            "name": "clientSecret",
                            "description": "Vimeo client secret",
                            "type": "String"
                        },
                        {
                            "name": "accessToken",
                            "description": "Vimeo client access token",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "WowzaProvider": {
            "name": "WowzaProvider",
            "shortname": "WowzaProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/WowzaProvider.js",
            "line": 14,
            "description": "Defines a WowzaProvider class to interact with [wowza platform](https://wowza.com/).",
            "extends": "VideoPlatformProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "providerConf",
                    "description": "A wowza configuration object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "host",
                            "description": "Server host",
                            "type": "String"
                        },
                        {
                            "name": "user",
                            "description": "Wowza user",
                            "type": "String"
                        },
                        {
                            "name": "pwd",
                            "description": "Wowza user password",
                            "type": "String"
                        },
                        {
                            "name": "protocol",
                            "description": "Server protocol (ftp, frtp, sftp or ftps), protocol is added on\nbeginning of host, ex : sftp://domain.com in this case",
                            "type": "String",
                            "optional": true,
                            "optdefault": "ftp"
                        },
                        {
                            "name": "port",
                            "description": "Server port added to the end of the host, ex: sftp://domain.com:22 in this case",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "videoPlatformFactory": {
            "name": "videoPlatformFactory",
            "shortname": "videoPlatformFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/factory.js",
            "line": 9,
            "description": "Defines a factory to create video platforms' providers.",
            "static": 1
        },
        "TYPES": {
            "name": "TYPES",
            "shortname": "TYPES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/videoPlatforms/types.js",
            "line": 7,
            "description": "Defines the list of video platforms types.",
            "static": 1
        },
        "ConfigurationProvider": {
            "name": "ConfigurationProvider",
            "shortname": "ConfigurationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/ConfigurationProvider.js",
            "line": 10,
            "description": "Defines a ConfigurationProvider to get and save publish configuration.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "PropertyProvider": {
            "name": "PropertyProvider",
            "shortname": "PropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/PropertyProvider.js",
            "line": 10,
            "description": "Defines a PropertyProvider to get and save custom properties.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "VideoProvider": {
            "name": "VideoProvider",
            "shortname": "VideoProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "providers",
            "namespace": "",
            "file": "app/server/providers/VideoProvider.js",
            "line": 10,
            "description": "Defines a VideoProvider to get and save videos.",
            "extends": "EntityProvider",
            "is_constructor": 1,
            "params": [
                {
                    "name": "database",
                    "description": "The database to interact with",
                    "type": "Database"
                }
            ]
        },
        "DirectoryFsWatcher": {
            "name": "DirectoryFsWatcher",
            "shortname": "DirectoryFsWatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 34,
            "description": "Defines a directory watcher which is a wrapper around Node.js fs.watch.\n\nfs.watch only emit \"change\" and \"rename\" events, nothing more.\nThis class intends to make it more user friendly by emitting more understandable events like \"create\" or \"delete\".\n\nIt analyzes only \"rename\" events, \"change\" events are not constant between Linux and Windows systems.\nOn both Linux and Windows systems :\nWhen a file is added a \"rename\" event is emitted followed by a \"change\" event\nWhen a file is renamed a \"rename\" event is emitted twice (one for the removal and one for the addition)\nWhen a file is removed a \"rename\" event is emitted\n\nTo work through this behaviour, a snapshot of the directory is made each time a \"rename\" event is fired.\nThen new resources inside the directory are compared to the snapshot to find out which resource has been\nadded or removed.\n\nIf a \"rename\" event is emitted while the directory is being analyzed, directory will be analyzed again making every\n\"rename\" event count.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "DirectoryWatcher": {
            "name": "DirectoryWatcher",
            "shortname": "DirectoryWatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 46,
            "description": "Defines a directory watcher to watch for changes inside a directory and its sub directories.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Watcher": {
            "name": "Watcher",
            "shortname": "Watcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/Watcher.js",
            "line": 43,
            "description": "Defines a watcher to be aware of new resources added to one or several directories.",
            "example": [
                "\n    // Create a new watcher\n    var watcher = new Watcher();\n\n    // Listen to watcher events\n    watcher.on('create', function(resourcePath) {\n      console.log('A new file has been added : ' + resourcePath);\n    });\n\n    watcher.on('delete', function(resourcePath) {\n      console.log('A file has been removed : ' + resourcePath);\n    });\n\n    watcher.on('watch', function(directoryPath) {\n      console.log('A watcher is now running for directory ' + directoryPath);\n    });\n\n    watcher.on('error', function(error) {\n      console.log(error);\n    });\n\n    // Ask watcher to watch directories\n    watcher.add([\n      '/tmp/hotFolder1',\n      '/tmp/hotFolder2',\n      '/tmp/hotFolder3'\n    ], function(results) {\n      console.log(results);\n    });\n\n    // Ask watcher to stop watching directories\n    watcher.remove([\n      '/tmp/hotFolder3'\n    ]);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Watcher options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stabilityThreshold",
                            "description": "Number of milliseconds to wait before considering a file\nas stable",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "WatcherError": {
            "name": "WatcherError",
            "shortname": "WatcherError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "watcher",
            "namespace": "",
            "file": "app/server/watcher/WatcherError.js",
            "line": 9,
            "description": "Defines an error occurring while watching for directory changes.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                },
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory in error",
                    "type": "String"
                }
            ]
        },
        "PublishError": {
            "name": "PublishError",
            "shortname": "PublishError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishError.js",
            "line": 9,
            "description": "Defines an error occurring in publish manager.",
            "extends": "Error",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "The error message",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The error code",
                    "type": "String"
                }
            ]
        },
        "PublishManager": {
            "name": "PublishManager",
            "shortname": "PublishManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishManager.js",
            "line": 57,
            "description": "Defines the PublishManager which handles the media publication's process.\n\nMedia publications are handled in parallel. Media publication's process can be\ndifferent regarding the type of the media.",
            "example": [
                "\n    var coreApi = process.api.getCoreApi();\n    var database = coreApi.getDatabase();\n    var PublishManager = process.requirePublish('app/server/PublishManager.js');\n    var videoModel = new VideoModel(null, new VideoProvider(database), new PropertyProvider(database));\n    var publishManager = new PublishManager(videoModel, 5);\n\n    // Listen publish manager's errors\n    publishManager.on('error', function(error) {\n      // Do something\n    });\n\n    // Listen to publish manager's end of processing for a media\n    publishManager.on('complete', function(mediaPackage){\n      // Do something\n    });\n\n    // Listen to publish manager's event informing that a media processing is retrying\n    publishManager.on('retry', function(mediaPackage) {\n      // Do something\n    });\n\n    // Listen to publish manager's event informing that a media, waiting for upload, starts uploading\n    publishManager.on('upload', function(mediaPackage) {\n      // Do something\n    });\n\n    publishManager.publish({\n      type: 'youtube', // The media platform to use for this media\n      originalPackagePath: '/home/openveo/medias/media-package.tar', // Path of the media package\n      originalFileName: 'media-package' // File name without extension\n    });"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "videoModel",
                    "description": "The videoModel",
                    "type": "VideoModel"
                },
                {
                    "name": "maxConcurrentPackage",
                    "description": "The maximum number of medias to treat in parallel",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "3"
                }
            ]
        },
        "PublishPlugin": {
            "name": "PublishPlugin",
            "shortname": "PublishPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/PublishPlugin.js",
            "line": 19,
            "description": "Defines the Publish Plugin that will be loaded by the core application.",
            "mainName": "publish",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "listener": {
            "name": "listener",
            "shortname": "listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "publish",
            "namespace": "",
            "file": "app/server/listener.js",
            "line": 14,
            "description": "Sets event listeners on core and plugins.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 33,
            "description": "Retrieves publish plugin configurations.",
            "itemtype": "method",
            "name": "getConfigurationAllAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 95,
            "description": "Redirects action that will be called by google when the user associate our application,\na code will be in the parameters.",
            "itemtype": "method",
            "name": "handleGoogleOAuthCodeAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "code",
                                    "description": "Google authentication code",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 118,
            "description": "Saves upload configuration.",
            "itemtype": "method",
            "name": "saveUploadConfiguration",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "body",
                            "description": "Request's body",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "owner",
                                    "description": "The id of the owner for new uploaded medias",
                                    "type": "String"
                                },
                                {
                                    "name": "group",
                                    "description": "The id of the group for new uploaded medias",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/ConfigurationController.js",
            "line": 182,
            "description": "Gets an instance of the entity model associated to the controller.",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "The entity model",
                "type": "EntityModel"
            },
            "class": "ConfigurationController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 29,
            "description": "Gets the list of custom property types.",
            "itemtype": "method",
            "name": "getPropertyTypesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 44,
            "description": "Gets a list of properties.",
            "itemtype": "method",
            "name": "getEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "query",
                                    "description": "Search query to search on both properties name and description",
                                    "type": "String"
                                },
                                {
                                    "name": "types",
                                    "description": "To filter properties by type",
                                    "type": "Array"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page",
                                    "type": "String"
                                },
                                {
                                    "name": "limit",
                                    "description": "The expected limit",
                                    "type": "String"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort properties by name or description (default is name)",
                                    "type": "String"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "Sort order (either asc or desc)",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/PropertyController.js",
            "line": 118,
            "description": "Gets an instance of the property model.",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "request",
                    "description": "The HTTP request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The PropertyModel instance",
                "type": "PropertyModel"
            },
            "class": "PropertyController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/StatisticsController.js",
            "line": 29,
            "description": "Route statistics.\n\nCheck if stats ar available\nbefore executing the stat function.",
            "itemtype": "method",
            "name": "statisticsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "entity",
                                    "description": "The entity type to work on (\"video\")",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "The statistic type to work on (\"views\")",
                                    "type": "String"
                                },
                                {
                                    "name": "id",
                                    "description": "The entity id",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "body",
                            "description": "Required for entity \"video\" and type \"views\"",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "count",
                                    "description": "Number to add to existing count (or to initialize)",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "StatisticsController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 43,
            "description": "Displays video player template.\n\nChecks first if the video id is valid and if the video is published\nbefore returning the template.",
            "itemtype": "method",
            "name": "displayVideoAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 81,
            "description": "Gets all media platforms available.",
            "example": [
                "\n    {\n      \"platforms\" : [\n        ...\n      ]\n    }"
            ],
            "itemtype": "method",
            "name": "getPlatformsAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 105,
            "description": "Gets information about a ready video (state is ready or published).",
            "example": [
                "\n    {\n      video : {\n        id : 123456789\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoReadyAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "id",
                                    "description": "The media id",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 148,
            "description": "Adds a media.",
            "example": [
                "\n\n    // Expected multipart body example\n    {\n      \"file\" : ...,\n      \"info\": {\n        \"title\" : 'Media title',\n        \"description\" : 'Media HTML description',\n        \"category\" : 'Media category',\n        \"groups\" : 'Media groups'\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "addEntityAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request"
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 399,
            "description": "Gets published videos by properties.",
            "example": [
                "\n    {\n      \"videos\" : [\n        ...\n      ]\n    }"
            ],
            "itemtype": "method",
            "name": "getEntitiesAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "query",
                            "description": "Request's query parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "query",
                                    "description": "To search on both videos' title and description",
                                    "type": "String"
                                },
                                {
                                    "name": "states",
                                    "description": "To filter medias by state",
                                    "type": "String|Array"
                                },
                                {
                                    "name": "dateStart",
                                    "description": "To filter medias after or equal to a date (in format mm/dd/yyyy)",
                                    "type": "String"
                                },
                                {
                                    "name": "dateEnd",
                                    "description": "To get medias before a date (in format mm/dd/yyyy)",
                                    "type": "String"
                                },
                                {
                                    "name": "categories",
                                    "description": "To filter medias by category",
                                    "type": "String|Array"
                                },
                                {
                                    "name": "groups",
                                    "description": "To filter medias by group",
                                    "type": "String|Array"
                                },
                                {
                                    "name": "sortBy",
                                    "description": "To sort medias by either **title**, **description** or **date**",
                                    "type": "String"
                                },
                                {
                                    "name": "sortOrder",
                                    "description": "Sort order (either **asc** or **desc**)",
                                    "type": "String"
                                },
                                {
                                    "name": "page",
                                    "description": "The expected page",
                                    "type": "String"
                                },
                                {
                                    "name": "limit",
                                    "description": "To limit the number of medias per page. If not specified get all medias",
                                    "type": "String"
                                },
                                {
                                    "name": "properties",
                                    "description": "A list of properties with the property id as the key and the expected\nproperty value as the value",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 523,
            "description": "Publishes videos.\n\nChange the state of videos to published",
            "itemtype": "method",
            "name": "publishVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "A comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 560,
            "description": "Unpublishes videos.\n\nChange the state of videos to unpublished.",
            "itemtype": "method",
            "name": "unpublishVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "A comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 599,
            "description": "Retries to publish videos on error.",
            "itemtype": "method",
            "name": "retryVideosAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "Comma separated list of media ids",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 640,
            "description": "Starts uploading videos to the media platform.",
            "itemtype": "method",
            "name": "startUploadAction",
            "async": 1,
            "params": [
                {
                    "name": "request",
                    "description": "ExpressJS HTTP Request",
                    "type": "Request",
                    "props": [
                        {
                            "name": "params",
                            "description": "Request's parameters",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "ids",
                                    "description": "Comma separated list of media ids",
                                    "type": "String"
                                },
                                {
                                    "name": "platform",
                                    "description": "The id of the platform to upload to",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "response",
                    "description": "ExpressJS HTTP Response",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Function to defer execution to the next registered middleware",
                    "type": "Function"
                }
            ],
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 683,
            "description": "Gets an instance of the video model.",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "request",
                    "description": "The HTTP request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The VideoModel instance",
                "type": "VideoModel"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 699,
            "description": "Gets PublishManager singleton.",
            "itemtype": "method",
            "name": "getPublishManager",
            "return": {
                "description": "The PublishManager singleton",
                "type": "PublishManager"
            },
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 709,
            "description": "Handles back office updateTags action to upload files and save associated tags.",
            "itemtype": "method",
            "name": "updateTagsAction",
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/VideoController.js",
            "line": 759,
            "description": "Handles back office removeTags action to remove tags.",
            "itemtype": "method",
            "name": "removeTagsAction",
            "class": "VideoController",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 24,
            "description": "Unidentified error.",
            "itemtype": "property",
            "name": "UNKNOWN_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 37,
            "description": "Getting a ready video failed.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 50,
            "description": "Publishing a video failed.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEO_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 63,
            "description": "Unpublishing a video failed.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEO_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 76,
            "description": "Getting Publish plugin configuration failed.",
            "itemtype": "property",
            "name": "GET_CONFIGURATION_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 89,
            "description": "Getting the list of custom properties failed.",
            "itemtype": "property",
            "name": "GET_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 102,
            "description": "Getting the list of videos failed.",
            "itemtype": "property",
            "name": "GET_VIDEOS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 115,
            "description": "Updating an entity statistics failed.",
            "itemtype": "property",
            "name": "STATISTICS_UPDATE_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 129,
            "description": "Setting Publish plugin configuration failed.",
            "itemtype": "property",
            "name": "SET_CONFIGURATION_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 142,
            "description": "Updating a video tag failed.",
            "itemtype": "property",
            "name": "UPDATE_VIDEO_TAGS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 155,
            "description": "Deleting a video tag failed.",
            "itemtype": "property",
            "name": "REMOVE_VIDEO_TAGS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 168,
            "description": "Attaching a file to a tag failed.",
            "itemtype": "property",
            "name": "UPLOAD_TAG_FILE_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 181,
            "description": "Getting the list of groups, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_GROUPS_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 194,
            "description": "Getting the list of custom properties, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_CUSTOM_PROPERTIES_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 207,
            "description": "Parsing multipart body, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_PARSE_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 220,
            "description": "Checking that media does not already exists in database, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_CHECK_DUPLICATE_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 233,
            "description": "Removing temporary media file, when adding a media, failed.",
            "itemtype": "property",
            "name": "ADD_MEDIA_REMOVE_FILE_ERROR",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 248,
            "description": "Getting a ready video failed, user doesn't have enough permissions.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 261,
            "description": "Publishing a video failed, user doesn't have enough permissions.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEO_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 274,
            "description": "Unpublishing a video failed, user doesn't have enough permissions.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEO_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 287,
            "description": "Updating a video tag failed, user doesn't have enough permissions.",
            "itemtype": "property",
            "name": "UPDATE_TAGS_VIDEO_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 300,
            "description": "Removing a video tag failed, user doesn't have enough permissions.",
            "itemtype": "property",
            "name": "REMOVE_TAGS_VIDEO_FORBIDDEN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 315,
            "description": "Getting a ready video failed, a parameter is missing.",
            "itemtype": "property",
            "name": "GET_VIDEO_READY_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 328,
            "description": "Publishing a video failed, a parameter is missing.",
            "itemtype": "property",
            "name": "PUBLISH_VIDEO_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 341,
            "description": "Unpublishing a video failed, a parameter is missing.",
            "itemtype": "property",
            "name": "UNPUBLISH_VIDEO_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 354,
            "description": "Retrying video processing failed, a parameter is missing.",
            "itemtype": "property",
            "name": "RETRY_VIDEO_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 367,
            "description": "Starting a video upload failed, a parameter is missing.",
            "itemtype": "property",
            "name": "START_UPLOAD_VIDEO_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 380,
            "description": "Setting statistics about an entity failed, missing the id parameter.",
            "itemtype": "property",
            "name": "STATISTICS_MISSING_ID_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 394,
            "description": "Setting statistics about an entity failed, unknown statistic property.",
            "itemtype": "property",
            "name": "STATISTICS_PROPERTY_UNKNOWN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 408,
            "description": "Setting statistics about an entity failed, unknown entity.",
            "itemtype": "property",
            "name": "STATISTICS_ENTITY_UNKNOWN",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 422,
            "description": "Setting statistics about an entity failed, missing the count parameter.",
            "itemtype": "property",
            "name": "STATISTICS_MISSING_COUNT_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 436,
            "description": "Getting the list of videos failed, wrong parameters.",
            "itemtype": "property",
            "name": "GET_VIDEOS_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 449,
            "description": "Update the video tag failed, wrong parameters.",
            "itemtype": "property",
            "name": "UPDATE_VIDEO_TAGS_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 463,
            "description": "remove the video tag failed, wrong parameters.",
            "itemtype": "property",
            "name": "REMOVE_VIDEO_TAG_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 477,
            "description": "Adding a media failed, wrong parameters.",
            "itemtype": "property",
            "name": "ADD_MEDIA_MISSING_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 490,
            "description": "Adding media failed, missing the body.",
            "itemtype": "property",
            "name": "ADD_MEDIA_MISSING_INFO_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 503,
            "description": "Adding media failed, wrong file parameter.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_FILE_PARAMETER",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 517,
            "description": "Adding media failed, wrong parameters.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_PARAMETERS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 530,
            "description": "Adding media failed, wrong properties parameter.",
            "itemtype": "property",
            "name": "ADD_MEDIA_WRONG_PROPERTIES_PARAMETER",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/controllers/httpErrors.js",
            "line": 543,
            "description": "Adding media failed, file already exists.",
            "itemtype": "property",
            "name": "ADD_MEDIA_FILE_ALREADY_EXISTS",
            "type": "Object",
            "final": 1,
            "class": "HTTP_ERRORS",
            "module": "controllers"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 25,
            "description": "Video provider.",
            "itemtype": "property",
            "name": "videoProvider",
            "type": "VideoProvider",
            "final": 1,
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 40,
            "description": "Property types.",
            "itemtype": "property",
            "name": "TYPES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 55,
            "description": "The list of available property types.",
            "itemtype": "property",
            "name": "availableTypes",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 66,
            "description": "Adds a new property.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "A property object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The property id",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "name",
                            "description": "The property name",
                            "type": "String"
                        },
                        {
                            "name": "description",
                            "description": "The property description",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "The property type (see PropertyModel.TYPES)",
                            "type": "String"
                        },
                        {
                            "name": "values",
                            "description": "The list of values if data.type = PropertyModel.TYPES.LIST",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted property",
                    "type": "Function"
                }
            ],
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 105,
            "description": "Updates property.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the property",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Information to update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The property name",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The property description",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "The property type (see PropertyModel.TYPES)",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "values",
                            "description": "The list of values if data.type = PropertyModel.TYPES.LIST",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/PropertyModel.js",
            "line": 136,
            "description": "Removes properties.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The ids of the properties to remove",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of removed properties",
                    "type": "Function"
                }
            ],
            "class": "PropertyModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 38,
            "description": "Property provider.",
            "itemtype": "property",
            "name": "propertyProvider",
            "type": "PropertyProvider",
            "final": 1,
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 47,
            "description": "List of pending updates.",
            "itemtype": "property",
            "name": "updateQueue",
            "type": "Array",
            "final": 1,
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 56,
            "description": "Indicates if an update is actually running.",
            "itemtype": "property",
            "name": "pendingUpdate",
            "type": "Boolean",
            "final": 1,
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 71,
            "description": "Removes a list of directories.",
            "itemtype": "method",
            "name": "removeDirectories",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directories",
                    "description": "The list of directory paths",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 83,
            "description": "Gets the closure to remove the given directory.",
            "params": [
                {
                    "name": "directory",
                    "description": "The path of the directory to remove",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A dedicated function to remove the directory",
                "type": "Function"
            },
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 106,
            "description": "Removes a all data related to a list of video ID.",
            "itemtype": "method",
            "name": "removeAllDataRelatedToVideo",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "videosToRemove",
                    "description": "The list of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 180,
            "description": "Gets the id of the super administrator.",
            "itemtype": "method",
            "name": "getSuperAdminId",
            "return": {
                "description": "The id of the super admin",
                "type": "String"
            },
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 190,
            "description": "Gets the id of the anonymous user.",
            "itemtype": "method",
            "name": "getAnonymousId",
            "return": {
                "description": "The id of the anonymous user",
                "type": "String"
            },
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 200,
            "description": "Remove a list of file",
            "itemtype": "method",
            "name": "removeTagsFile",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "filePathArray",
                    "description": "The list of path file to delete",
                    "type": "Array"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 236,
            "description": "Executes an update operation on the given media.\n\nOnly one update operation can be performed at a time. Pending operations\nare added to the queue and executed sequentially.",
            "itemtype": "method",
            "name": "updateMedia",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "The media id",
                    "type": "String"
                },
                {
                    "name": "modifier",
                    "description": "Database modifier",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 253,
            "description": "Executes oldest update in the queue.",
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 293,
            "description": "Resolves videos resources urls using CDN url.\n\nVideos may have attached resources like files associated to tags, timecodes images, thumbnail image and\nso on. These resources must be accessible through an url. As all resources must, in the future, reside in\na CDN, resolveResourcesUrls transforms all resources URIs to URLs based on CDN.",
            "params": [
                {
                    "name": "videos",
                    "description": "The list of videos",
                    "type": "Array"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 351,
            "description": "Adds a new video.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "media",
                    "description": "Information about the video",
                    "type": "Object",
                    "props": [
                        {
                            "name": "id",
                            "description": "The media id",
                            "type": "String"
                        },
                        {
                            "name": "available",
                            "description": "true if the media is available, false otherwise",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "description": "The media title",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The media description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "The media state (see STATES class from module packages)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "date",
                            "description": "The media date",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "The id of the associated media platform",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "metadata",
                            "description": "Information about the media",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "user",
                                    "description": "The id of the user the media belongs to",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "groups",
                                    "description": "The list of groups the media belongs to",
                                    "type": "Array",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "errorCode",
                            "description": "The media error code (see ERRORS class from module packages)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "category",
                            "description": "The id of the category the media belongs to",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "The list of properties' values for this media",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "packageType",
                            "description": "The type of package",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "lastState",
                            "description": "The last media state in publication process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "lastTransition",
                            "description": "The last media transition in publication process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "originalPackagePath",
                            "description": "Absolute path of the original package",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "originalFileName",
                            "description": "Original package name without the extension",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "mediaId",
                            "description": "Id the of media of the media platform",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timecodes",
                            "description": "The list of media timecodes",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "chapters",
                            "description": "The list of media chapters",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "cut",
                            "description": "Media begin and end cuts",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "sources",
                            "description": "The list of media sources",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "views",
                            "description": "The statistic number of views",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total amount of items inserted\n  - **Object** The inserted video",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 422,
            "description": "Updates video state.",
            "itemtype": "method",
            "name": "updateState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The state of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 437,
            "description": "Updates last video state.",
            "itemtype": "method",
            "name": "updateLastState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The last state of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 452,
            "description": "Updates last video transition.",
            "itemtype": "method",
            "name": "updateLastTransition",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The last transition of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 467,
            "description": "Updates video error code.",
            "itemtype": "method",
            "name": "updateErrorCode",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "errorCode",
                    "description": "The error code of the video",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 482,
            "description": "Updates video link.",
            "itemtype": "method",
            "name": "updateLink",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "link",
                    "description": "The link of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 497,
            "description": "Updates media id for media platform.",
            "itemtype": "method",
            "name": "updateMediaId",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the media to update",
                    "type": "String"
                },
                {
                    "name": "idMediaPlatform",
                    "description": "The id of the media in the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 512,
            "description": "Updates video metadata for video platform.",
            "itemtype": "method",
            "name": "updateMetadata",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "metadata",
                    "description": "The metadata of the video in the video platform",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 527,
            "description": "Updates video date timestamp.",
            "itemtype": "method",
            "name": "updateDate",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "date",
                    "description": "The date of the video",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 542,
            "description": "Updates video category for video platform.",
            "itemtype": "method",
            "name": "updateCategory",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "category",
                    "description": "The category id of the video in the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 557,
            "description": "Updates video platform type.",
            "itemtype": "method",
            "name": "updateType",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "The type of the video platform",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 572,
            "description": "Updates video thumbnail.",
            "itemtype": "method",
            "name": "updateThumbnail",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "Number"
                },
                {
                    "name": "path",
                    "description": "The path of the thumbnail file",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 587,
            "description": "Gets the list of videos.",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of videos",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 667,
            "description": "Gets an ordered list of videos by page.",
            "itemtype": "method",
            "name": "getPaginatedFilteredEntities",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "A MongoDB filter object",
                    "type": "Object"
                },
                {
                    "name": "limit",
                    "description": "The expected number of results",
                    "type": "Number"
                },
                {
                    "name": "page",
                    "description": "The page number",
                    "type": "Number"
                },
                {
                    "name": "sort",
                    "description": "A MongoDB sort object",
                    "type": "Object"
                },
                {
                    "name": "populate",
                    "description": "Parameter to know if the entities must return populated dependencies",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Array** The list of videos\n  - **Object** Pagination information",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 752,
            "description": "Gets a video.\n\nOnly a ready video can be fetched.",
            "itemtype": "method",
            "name": "getOneReady",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The video",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 775,
            "description": "Gets a video.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The video information (see example)",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 855,
            "description": "Removes a list of videos.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The list of video ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The total number of deleted videos",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 896,
            "description": "Updates a video.",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the media",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The media info",
                    "type": "Object",
                    "props": [
                        {
                            "name": "title",
                            "description": "The media title",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "description": "The media description",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "The media properties' values",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "category",
                            "description": "The category the media belongs to, nullable",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cut",
                            "description": "Begin and end cuts",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "chapters",
                            "description": "The media chapters",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "views",
                            "description": "The media number of views",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "groups",
                            "description": "The list of groups the media belongs to",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "user",
                            "description": "The id of the user the media belongs to, null to delete associated user, nullable",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 960,
            "description": "Publishes videos.\n\nChange the state of the videos to \"published\" only if its state is\nactually \"ready\".",
            "itemtype": "method",
            "name": "publishVideos",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The array ids of videos",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of published videos",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 990,
            "description": "Unpublishes videos.\n\nChange the state of the videos to \"ready\" only if its state is\nactually \"published\".",
            "itemtype": "method",
            "name": "unpublishVideos",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The array ids of videos",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of unpublished videos",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 1020,
            "description": "Updates video views.",
            "itemtype": "method",
            "name": "increaseVideoViews",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "String"
                },
                {
                    "name": "views",
                    "description": "number to add to existing count (or to initialize)",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 1035,
            "description": "Edit a tag item by adding file informations",
            "itemtype": "method",
            "name": "resolveMediaPath",
            "params": [
                {
                    "name": "id",
                    "description": "The media id",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "item to modify with file",
                    "type": "Object"
                },
                {
                    "name": "file",
                    "description": "File information do add",
                    "type": "[type]"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 1050,
            "description": "Add/update video tags/chapters to existing tags/chapters\nAssociate a file to a tag",
            "itemtype": "method",
            "name": "updateTags",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to update",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The list of tags to updates",
                    "type": "Object"
                },
                {
                    "name": "file",
                    "description": "The file information to attach to the tag",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The dataed pass in param",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 1108,
            "description": "Remove video tags/chapters to existing tags/chapters\nRemove associated file",
            "itemtype": "method",
            "name": "removeTags",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the video to delete tag",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The list of tags to delete",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The data passed in param",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/models/VideoModel.js",
            "line": 1162,
            "description": "Sets videos user to no one.",
            "itemtype": "method",
            "name": "anonymizeByUser",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "A list of user ids, all videos which belong to these users\nwill be anonymized",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "VideoModel",
            "module": "models"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 22,
            "description": "Fired when an error occurred while processing the package.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "Error"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 29,
            "description": "Fired when package processing has succeed.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 36,
            "description": "Fired when package state has changed.",
            "itemtype": "event",
            "name": "stateChanged",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 56,
            "description": "Publish configuration.",
            "itemtype": "property",
            "name": "publishConf",
            "type": "Object",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 65,
            "description": "Video model.",
            "itemtype": "property",
            "name": "videoModel",
            "type": "VideoModel",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 74,
            "description": "Media package description object.",
            "itemtype": "property",
            "name": "mediaPackage",
            "type": "Object",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 82,
            "description": "Video platforms configuration object from videoPlatformConf.json file.",
            "itemtype": "property",
            "name": "videoPlatformConf",
            "type": "Object",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 91,
            "description": "Configuration model.",
            "itemtype": "property",
            "name": "configurationModel",
            "type": "ConfigurationModel",
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 111,
            "description": "Package states.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 130,
            "description": "Package transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 148,
            "description": "Define the order in which transitions will be executed for a Package.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 166,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 208,
            "description": "Creates a state machine to publish the package.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "initialState",
                    "description": "Initial machine state",
                    "type": "String"
                },
                {
                    "name": "initialTransition",
                    "description": "Initial machine transition",
                    "type": "String"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 254,
            "description": "Updates media state and sends an event to inform about state changed.",
            "itemtype": "method",
            "name": "updateState",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id of the media to update",
                    "type": "Number"
                },
                {
                    "name": "state",
                    "description": "The state of the media",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Number** The number of updated items",
                    "type": "Function"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 274,
            "description": "Starts executing at the given transition.\n\nThe rest of the transitions stack will be executed.",
            "itemtype": "method",
            "name": "executeTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition to launch",
                    "type": "String"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 322,
            "description": "Initializes and stores the package.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "initPackage",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 393,
            "description": "Copies package from its submitted directory to temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "copyPackage",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 421,
            "description": "Removes original package.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "removeOriginalPackage",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 441,
            "description": "Uploads the media to the video platform.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "uploadMedia",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 485,
            "description": "Configures uploaded media in video platform.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "configureMedia",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 515,
            "description": "Removes extracted tar files from temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "cleanDirectory",
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 536,
            "description": "Gets the stack of transitions corresponding to the package.\n\nEach package has its own way to be published, thus transitions stack\nis different by package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 549,
            "description": "Gets the list of transitions states corresponding to the package.",
            "itemtype": "method",
            "name": "getStateMachine",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 559,
            "description": "Gets the media file path of the package.",
            "itemtype": "method",
            "name": "getMediaFilePath",
            "return": {
                "description": "System path of the media file",
                "type": "String"
            },
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/Package.js",
            "line": 572,
            "description": "Sets a package as in error.",
            "itemtype": "method",
            "name": "setError",
            "params": [
                {
                    "name": "error",
                    "description": "The package error",
                    "type": "PublishError"
                }
            ],
            "class": "Package",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 23,
            "description": "The package's error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 32,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/PackageError.js",
            "line": 41,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "final": 1,
            "class": "PackageError",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 81,
            "description": "Process states for tar packages.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 97,
            "description": "Tar package process transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 113,
            "description": "Define the order in which transitions will be executed for a TarPackage.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 139,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 196,
            "description": "Validates package content.\n\nA video package must contain, at least a valid package information\nfile and a video file.",
            "example": [
                "\n    // mediaPackage example\n    {\n      \"id\" : 1422731934859, // Internal video id\n      \"type\" : \"vimeo\", // The video platform to use\n      \"path\" : \"C:/Temp/\", // The path of the hot folder\n      \"originalPackagePath\" : \"C:/Temp/video-package.tar\", // The original package path in hot folder\n    }"
            ],
            "itemtype": "method",
            "name": "validatePackage",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The package information object",
                    "type": "Function"
                }
            ],
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 252,
            "description": "Saves the XML timecode file into a JSON equivalent.\nThis will check if the file exists first.\n\n1. Test if timecode xml file exists\n2. Transcode XML file to a JSON equivalent\n   e.g.\n3. Format JSON\n   e.g.",
            "example": [
                "\n    // Transform XML timecodes into JSON\n    // From :\n    {\n      \"player\": {\n        \"synchro\":\n        [\n          {\n            \"id\": [\"slide_00000.jpeg\"],\n            \"timecode\": [\"0\"]\n          }, {\n            \"id\": [\"slide_00001.jpeg\"],\n            \"timecode\": [\"1200\"]\n          }\n        ]\n      }\n    }\n\n    // To :\n    [\n      {\n        \"timecode\": 0,\n        \"type\": \"image\"\n        \"data\": {\n          \"filename\": \"slide_00000.jpeg\"\n        }\n      },\n      {\n        \"timecode\": 1200,\n        \"type\": \"image\"\n        \"data\": {\n          \"filename\": \"slide_00001.jpeg\"\n        }\n      }\n    ]"
            ],
            "itemtype": "method",
            "name": "saveTimecodes",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "xmlTimecodeFilePath",
                    "description": "The timecode file to save",
                    "type": "String"
                },
                {
                    "name": "destinationFilePath",
                    "description": "The JSON timecode file path",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 375,
            "description": "Gets the stack of transitions corresponding to the package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 385,
            "description": "Gets the list of transitions states corresponding to the package.",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "getStateMachine",
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 395,
            "description": "Extracts package into temporary directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "extractPackage",
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 430,
            "description": "Validates the package by analyzing its content.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "validatePackage",
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 472,
            "description": "Saves package timecodes into a JSON file.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "saveTimecodes",
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/TarPackage.js",
            "line": 561,
            "description": "Gets the media file path of the package.",
            "itemtype": "method",
            "name": "getMediaFilePath",
            "return": {
                "description": "System path of the media file",
                "type": "String"
            },
            "class": "TarPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 42,
            "description": "Process states for video packages.",
            "itemtype": "property",
            "name": "STATES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 58,
            "description": "Video package process transitions (from one state to another).",
            "itemtype": "property",
            "name": "TRANSITIONS",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 74,
            "description": "Define the order in which transitions will be executed for a video Package.",
            "itemtype": "property",
            "name": "stateTransitions",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 96,
            "description": "Define machine state authorized transitions depending on previous and next states.",
            "itemtype": "property",
            "name": "stateMachine",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 138,
            "description": "Defragment the MP4\n\nIf the input file is fragmented, ffmpeg will be used to defragment\nthe MP4. The fragmentation detection of the file is based on an un-\nknown \"nb_frames\" property in ffprobe output metadata.",
            "itemtype": "method",
            "name": "defragmentMp4",
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 210,
            "description": "Generates a thumbnail for the video.\n\nIt uses ffmpeg to extract an image from the video.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "generateThumb",
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 245,
            "description": "Prepares public directory where the media associated files will be deployed.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "preparePublicDirectory",
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 269,
            "description": "Retrieves video height from video metadatas.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "getMetadata",
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 313,
            "description": "Copies presentation images from temporary directory to the public directory.\n\nThis is a transition.",
            "itemtype": "method",
            "name": "copyImages",
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 397,
            "description": "Gets the stack of transitions corresponding to the package.\n\nEach package has its own way to be published, thus transitions stack\nis different by package.",
            "itemtype": "method",
            "name": "getTransitions",
            "return": {
                "description": "The stack of transitions",
                "type": "Array"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/VideoPackage.js",
            "line": 410,
            "description": "Gets the list of transitions states corresponding to the package.",
            "itemtype": "method",
            "name": "getStateMachine",
            "return": {
                "description": "The list of states/transitions",
                "type": "Array"
            },
            "class": "VideoPackage",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 16,
            "description": "No error.",
            "itemtype": "property",
            "name": "NO_ERROR",
            "type": "Number",
            "default": "-1",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 26,
            "description": "Error involving a server error.",
            "itemtype": "property",
            "name": "UNKNOWN",
            "type": "Number",
            "default": "0",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 36,
            "description": "Package type is not supported.",
            "itemtype": "property",
            "name": "INVALID_PACKAGE_TYPE",
            "type": "Number",
            "default": "1",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 46,
            "description": "Package copy failed.",
            "itemtype": "property",
            "name": "COPY",
            "type": "Number",
            "default": "2",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 56,
            "description": "Removing original package failed.",
            "itemtype": "property",
            "name": "UNLINK",
            "type": "Number",
            "default": "3",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 66,
            "description": "Extracting an archive package failed.",
            "itemtype": "property",
            "name": "EXTRACT",
            "type": "Number",
            "default": "4",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 76,
            "description": "Package does not respect the expected format for its type.",
            "itemtype": "property",
            "name": "VALIDATION",
            "type": "Number",
            "default": "5",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 86,
            "description": "Creating public directory to expose package's files failed.",
            "itemtype": "property",
            "name": "CREATE_VIDEO_PUBLIC_DIR",
            "type": "Number",
            "default": "6",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 96,
            "description": "Saving package data into database failed.",
            "itemtype": "property",
            "name": "SAVE_PACKAGE_DATA",
            "type": "Number",
            "default": "7",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 106,
            "description": "Creating synchro.json file failed.",
            "itemtype": "property",
            "name": "SAVE_TIMECODE",
            "type": "Number",
            "default": "8",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 116,
            "description": "Uploading media to media platform failed.",
            "itemtype": "property",
            "name": "MEDIA_UPLOAD",
            "type": "Number",
            "default": "9",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 126,
            "description": "Configuring media in the media platform failed.",
            "itemtype": "property",
            "name": "MEDIA_CONFIGURE",
            "type": "Number",
            "default": "10",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 136,
            "description": "Scanning package temporary directory failed.",
            "itemtype": "property",
            "name": "SCAN_FOR_IMAGES",
            "type": "Number",
            "default": "11",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 146,
            "description": "Cleaning package temporary directory failed.",
            "itemtype": "property",
            "name": "SCAN_FOR_IMAGES",
            "type": "Number",
            "default": "13",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 156,
            "description": "Retrying / uploading package failed.\n\nPackage was not found.",
            "itemtype": "property",
            "name": "PACKAGE_NOT_FOUND",
            "type": "Number",
            "default": "14",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 168,
            "description": "Executing a state machine transition failed.",
            "itemtype": "property",
            "name": "TRANSITION",
            "type": "Number",
            "default": "15",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 178,
            "description": "Package configuration is not valid when creating a Package.",
            "itemtype": "property",
            "name": "INVALID_CONFIGURATION",
            "type": "Number",
            "default": "16",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 188,
            "description": "Generating media thumbnail failed.",
            "itemtype": "property",
            "name": "GENERATE_THUMB",
            "type": "Number",
            "default": "17",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 198,
            "description": "Getting media metadata failed.",
            "itemtype": "property",
            "name": "GET_METADATA",
            "type": "Number",
            "default": "18",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 208,
            "description": "Copying media thumbnail failed.",
            "itemtype": "property",
            "name": "COPY_THUMB",
            "type": "Number",
            "default": "19",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 218,
            "description": "Defragmentation of the mp4 failed",
            "itemtype": "property",
            "name": "DEFRAGMENTATION",
            "type": "Number",
            "default": "20",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 228,
            "description": "Remove fragmented file",
            "itemtype": "property",
            "name": "UNLINK_FRAGMENTED",
            "type": "Number",
            "default": "21",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/errors.js",
            "line": 238,
            "description": "Replacing fragmented file",
            "itemtype": "property",
            "name": "",
            "type": "Number",
            "default": "22",
            "final": 1,
            "class": "ERRORS",
            "module": "packages"
        },
        {
            "file": "app/server/packages/packageFactory.js",
            "line": 22,
            "description": "Gets an instance of a Package depending on package file type (factory).",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the package platform to instanciate",
                    "type": "String"
                },
                {
                    "name": "mediaPackage",
                    "description": "Information about the media",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of a Package sub class",
                "type": "Package"
            },
            "class": "factory",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 16,
            "description": "Package is on error.",
            "itemtype": "property",
            "name": "ERROR",
            "type": "Number",
            "default": "0",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 26,
            "description": "Package is in the queue waiting to be processed.",
            "itemtype": "property",
            "name": "PENDING",
            "type": "Number",
            "default": "1",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 36,
            "description": "Package is copying.",
            "itemtype": "property",
            "name": "COPYING",
            "type": "Number",
            "default": "2",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 46,
            "description": "Package is extracting.",
            "itemtype": "property",
            "name": "EXTRACTING",
            "type": "Number",
            "default": "3",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 56,
            "description": "Package is validating.",
            "itemtype": "property",
            "name": "VALIDATING",
            "type": "Number",
            "default": "4",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 66,
            "description": "Package is preparing.",
            "itemtype": "property",
            "name": "PREPARING",
            "type": "Number",
            "default": "5",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 76,
            "description": "Package is waiting for a user action to be uploaded to the platform.",
            "itemtype": "property",
            "name": "WAITING_FOR_UPLOAD",
            "type": "Number",
            "default": "6",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 86,
            "description": "Package is uploading to the platform.",
            "itemtype": "property",
            "name": "UPLOADING",
            "type": "Number",
            "default": "7",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 96,
            "description": "Package's platform information is configuring.",
            "itemtype": "property",
            "name": "CONFIGURING",
            "type": "Number",
            "default": "8",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 106,
            "description": "Package is saving timecodes.",
            "itemtype": "property",
            "name": "SAVING_TIMECODES",
            "type": "Number",
            "default": "9",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 116,
            "description": "Package is copying images.",
            "itemtype": "property",
            "name": "COPYING_IMAGES",
            "type": "Number",
            "default": "10",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 126,
            "description": "Package is processed but not published.",
            "itemtype": "property",
            "name": "READY",
            "type": "Number",
            "default": "11",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 136,
            "description": "Package is processed and published.",
            "itemtype": "property",
            "name": "PUBLISHED",
            "type": "Number",
            "default": "12",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 146,
            "description": "Package is generating thumbnail.",
            "itemtype": "property",
            "name": "GENERATE_THUMB",
            "type": "Number",
            "default": "13",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 156,
            "description": "Package is analyzing media for more information.",
            "itemtype": "property",
            "name": "GET_METADATA",
            "type": "Number",
            "default": "14",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/packages/states.js",
            "line": 166,
            "description": "Package is defragmenting the mp4.",
            "type": "Number",
            "default": "15",
            "final": 1,
            "class": "STATES",
            "module": "packages"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 34,
            "description": "Google oauth client library.",
            "itemtype": "property",
            "name": "oauth2Client",
            "type": "OAuth2",
            "final": 1,
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 45,
            "description": "Configuration model.",
            "itemtype": "property",
            "name": "confModel",
            "type": "ConfigurationModel",
            "final": 1,
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 57,
            "description": "Persists the tokens retrieved from Google.",
            "itemtype": "method",
            "name": "saveToken",
            "params": [
                {
                    "name": "tokens",
                    "description": "The tokens retrieved from Google",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The saved token object",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 109,
            "description": "Retrieves the current token or null if it was not persisted earlier.",
            "itemtype": "method",
            "name": "fetchToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 137,
            "description": "Builds the url that will permit to access google association page on the client's browser.",
            "itemtype": "method",
            "name": "getAuthUrl",
            "params": [
                {
                    "name": "options",
                    "description": "Options to build the url, 'scope' is mandatory",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The url to the google association page",
                "type": "String"
            },
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 158,
            "description": "Retrieves a token from google with an authorization code, this token is then saved for later use and can be\nretrieved with @see this.fetchToken.",
            "itemtype": "method",
            "name": "persistTokenWithCode",
            "params": [
                {
                    "name": "code",
                    "description": "The authorization code",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 184,
            "description": "Checks whether or not a previous token has been retrieved.",
            "itemtype": "method",
            "name": "hasToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Boolean** true a token exists, false otherwise",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/GoogleOAuthHelper.js",
            "line": 198,
            "description": "Retrieves a fresh (=valid) token, if a previous token was set and is still valid it is returned. If this previous\ntoken is not valid anymore a new token is retrieved.\nThis function should be used after a previous successfull google association.",
            "itemtype": "method",
            "name": "getFreshToken",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback function with :\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The token object",
                    "type": "Function"
                }
            ],
            "class": "GoogleOAuthHelper",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 18,
            "description": "Available upload methods.",
            "itemtype": "property",
            "name": "UPLOAD_METHODS",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 29,
            "description": "Available privacy statuses.",
            "itemtype": "property",
            "name": "PRIVACY_STATUSES",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "final": 1,
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 56,
            "description": "Youtube upload method, uploadClassic or uploadResumable.",
            "itemtype": "property",
            "name": "uploadMethod",
            "type": "String",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 66,
            "description": "Privacy to apply to uploaded videos either public, private or unlisted.",
            "itemtype": "property",
            "name": "privacy",
            "type": "String",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 76,
            "description": "The Google OAuth Helper to use to connect to Google APIs.",
            "itemtype": "property",
            "name": "googleOAuthHelper",
            "type": "GoogleOAuthHelper",
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 90,
            "description": "Uploads a video to the Youtube platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "System path of the video to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 144,
            "description": "Uploads to youtube in the classic way, using their api.",
            "itemtype": "method",
            "name": "uploadClassic",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "the path to the video to upload",
                    "type": "String"
                },
                {
                    "name": "uploadParams",
                    "description": "params to send to youtube when calling their api",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback function with :\n - **Error** The error if an error occurred, null otherwise\n - **String** The uploaded media id",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 199,
            "description": "Uploads to youtube in a fail safe way, using resumable uploads.\n\nThe upload can fail 3 times before failing globally, each times it fails it perform an upload again\nstarting where it previously failed (ie: not re-upoloading all the video)",
            "itemtype": "method",
            "name": "uploadResumable",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "the path to the video to upload",
                    "type": "String"
                },
                {
                    "name": "uploadParams",
                    "description": "params to send to youtube when calling their api",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "callback function with :\n - **Error** The error if an error occurred, null otherwise\n - **String** The uploaded media id",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 280,
            "description": "Gets information about a video hosted by Youtube.",
            "example": [
                "\n    // Returned data example\n    {\n      available : true,\n      pictures : [],\n      sources : [],\n      mediaId : '123456'\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The Youtube id of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the video",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeProvider.js",
            "line": 309,
            "description": "Removes a video from the Youtube platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Media Ids array of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the remove\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "YoutubeProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 22,
            "description": "TODO",
            "itemtype": "property",
            "name": "byteCount",
            "type": "Number",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 30,
            "description": "TODO",
            "itemtype": "property",
            "name": "tokens",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 38,
            "description": "TODO",
            "itemtype": "property",
            "name": "filepath",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 46,
            "description": "TODO",
            "itemtype": "property",
            "name": "metadata",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 54,
            "description": "TODO",
            "itemtype": "property",
            "name": "retry",
            "type": "Number",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 62,
            "description": "TODO",
            "itemtype": "property",
            "name": "host",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 70,
            "description": "TODO",
            "itemtype": "property",
            "name": "api",
            "type": "String",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 78,
            "description": "TODO",
            "itemtype": "property",
            "name": "stats",
            "type": "Object",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 90,
            "description": "Inits the upload by POSTing google for an upload URL (saved to self.location).",
            "itemtype": "method",
            "name": "upload",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 132,
            "description": "Pipes uploadPipe to self.location (Google's Location header).",
            "itemtype": "method",
            "name": "send",
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/youtube/YoutubeResumableUpload.js",
            "line": 191,
            "description": "TODO.",
            "itemtype": "method",
            "name": "getProgress",
            "params": [
                {
                    "name": "handler",
                    "description": "TODO"
                }
            ],
            "class": "ResumableUpload",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/LocalProvider.js",
            "line": 31,
            "description": "Uploads a video to the Local platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "System path of the video to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/LocalProvider.js",
            "line": 62,
            "description": "Gets information about a video hosted by Local.",
            "example": [
                "\n    // Returned data example\n    {\n      available : true,\n      sources : {\n        adaptive:[\n        {\n          mimeType : application/dash+xml,\n          link : \"http://192.168.1.20:1935/openveo/mp4:sample.mp4/manifest.mpd\"\n        },\n        ...\n      ]\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The local id of the video",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected video definition (e.g. 720, 1080) _ not use on local",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the video",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/LocalProvider.js",
            "line": 109,
            "description": "Remove a video from the Local platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Media Ids array of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the remove\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "LocalProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 27,
            "description": "The video platform's configuration.",
            "itemtype": "property",
            "name": "conf",
            "type": "Object",
            "final": 1,
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 46,
            "itemtype": "property",
            "name": "QUALITIES",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 59,
            "description": "Uploads a video to the platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "System path of the video to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 73,
            "description": "Removes a video from the platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Video media IDs array of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the remove\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 87,
            "description": "Configures a video on the platform.\n\nDepending on the platform, some video properties must be set after the\nupload of the video.",
            "itemtype": "method",
            "name": "configure",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The id of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VideoPlatformProvider.js",
            "line": 104,
            "description": "Gets information about a video from video platform.\n\nVideo is considered available if the expected video definition has been transcoded by the video platform.",
            "example": [
                "\n    // Returned data example\n    {\n      available : true,\n      sources: {\n        files : [\n          {\n            quality : 0, // 0 = mobile, 1 = sd, 2 = hd\n            width : 640,\n            height : 360,\n            link : \"https://player.vimeo.com/external/135956519.sd.mp4?s=01ffd473e33e1af14c86effe71464d15&profile_id=112&oauth2_token_id=80850094\"\n          },\n          ...\n        ],\n        adaptive : [\n          {\n           link : 'http://streaming/platform/mp4:video.mp4/manifest.mpd'\n           mimeType : 'application/dash+xml'\n          },\n          ...\n        ]\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The platform id of the video",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected video definition (e.g. 720, 1080)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the video",
                    "type": "Function"
                }
            ],
            "class": "VideoPlatformProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 30,
            "description": "Vimeo client library.",
            "itemtype": "property",
            "name": "vimeo",
            "type": "Vimeo",
            "final": 1,
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 39,
            "description": "List of accepted video qualities.",
            "itemtype": "property",
            "name": "qualitiesMap",
            "type": "Object",
            "final": 1,
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 60,
            "description": "Uploads a video to the Vimeo platform.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "System path of the video to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 141,
            "description": "Gets information about a video hosted by Vimeo.\n\nVideo is considered available if the expected video definition has been transcoded by the video platform.",
            "example": [
                "\n    // Returned data example\n    {\n      available : true,\n      sources : {\n        files : [\n          {\n            quality : 0, // 0 = mobile, 1 = sd, 2 = hd\n            width : 640,\n            height : 360,\n            link : \"https://player.vimeo.com/external/135956519.sd.mp4?s=01ffd473e33e1af14c86effe71464d15&profile_id=112&oauth2_token_id=80850094\"\n          },\n          ...\n        ]\n      }\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The Vimeo id of the video",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected video definition (e.g. 720, 1080)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the video",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/VimeoProvider.js",
            "line": 239,
            "description": "Removes a video from the Vimeo platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Media Ids array of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the remove\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VimeoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/WowzaProvider.js",
            "line": 62,
            "description": "Uploads a video to the Wowza platform.\n\nTODO Find a way to avoid sending default preset request on Wowza\nfor each upload.",
            "itemtype": "method",
            "name": "upload",
            "async": 1,
            "params": [
                {
                    "name": "videoFilePath",
                    "description": "System path of the video to upload",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the upload\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/WowzaProvider.js",
            "line": 107,
            "description": "Gets information about a video hosted by Wowza.",
            "example": [
                "\n    // Returned data example\n    {\n      available : true,\n      sources : {\n        adaptive:[\n        {\n          mimeType : application/dash+xml,\n          link : \"http://192.168.1.20:1935/openveo/mp4:sample.mp4/manifest.mpd\"\n        },\n        ...\n      ]\n    }"
            ],
            "itemtype": "method",
            "name": "getVideoInfo",
            "async": 1,
            "params": [
                {
                    "name": "mediaId",
                    "description": "The wowza id of the video",
                    "type": "String"
                },
                {
                    "name": "expectedDefintion",
                    "description": "The expected video definition (e.g. 720, 1080) _ not use on wowza",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** Information about the video",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/WowzaProvider.js",
            "line": 164,
            "description": "Removes a video from the wowza platform.",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "mediaIds",
                    "description": "Media Ids array of videos to remove",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the remove\nis done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "WowzaProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/factory.js",
            "line": 16,
            "description": "Gets an instance of a VideoPlatformProvider giving a type and a\nconfiguration object.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of the provider platform to instanciate",
                    "type": "String"
                },
                {
                    "name": "providerConf",
                    "description": "A video platform configuration object,\nit's structure depend on the provider's type, see extended objects\nfor more information",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of a VideoPlatformProvider sub class",
                "type": "VideoPlatformProvider"
            },
            "throws": {
                "description": "The configuration doesn't satisfy the provider or given type is not available",
                "type": "Error"
            },
            "class": "videoPlatformFactory",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/types.js",
            "line": 16,
            "description": "Vimeo provider.",
            "itemtype": "property",
            "name": "VIMEO",
            "type": "String",
            "default": "'vimeo'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/types.js",
            "line": 26,
            "description": "Youtube provider.",
            "itemtype": "property",
            "name": "YOUTUBE",
            "type": "String",
            "default": "'youtube'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/types.js",
            "line": 36,
            "description": "Wowza provider.",
            "itemtype": "property",
            "name": "WOWZA",
            "type": "String",
            "default": "'wowza'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/videoPlatforms/types.js",
            "line": 46,
            "description": "Local provider.",
            "itemtype": "property",
            "name": "LOCAL",
            "type": "String",
            "default": "'local'",
            "final": 1,
            "class": "TYPES",
            "module": "providers"
        },
        {
            "file": "app/server/providers/PropertyProvider.js",
            "line": 25,
            "description": "Creates properties indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PropertyProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 25,
            "description": "Updates state of videos.",
            "itemtype": "method",
            "name": "updateVideosState",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The ids of the videos",
                    "type": "Array"
                },
                {
                    "name": "oldState",
                    "description": "The actual state of the video",
                    "type": "String"
                },
                {
                    "name": "newState",
                    "description": "The new state of the video",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 56,
            "description": "Fetches a list of videos with pagination.",
            "itemtype": "method",
            "name": "getPaginatedFilteredEntities",
            "async": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Collection of filters formatted like MongoDB filters",
                    "type": "Object"
                },
                {
                    "name": "limit",
                    "description": "The expected number of videos per page",
                    "type": "Number"
                },
                {
                    "name": "page",
                    "description": "The index of the page to retrieve",
                    "type": "Number"
                },
                {
                    "name": "sort",
                    "description": "Collection of keys to sort with the order value (-1 : desc, 1 asc) e.g. {\"name\":-1, age:\"1\"}",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function to call when its done with :\n - **Error** The error if an error occurred, null otherwise\n - **Array** The list of videos",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 79,
            "description": "Gets an entity.",
            "itemtype": "method",
            "name": "getOne",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The entity id",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "A MongoDB filter",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise\n  - **Object** The entity",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 106,
            "description": "Creates videos indexes.",
            "itemtype": "method",
            "name": "createIndexes",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/providers/VideoProvider.js",
            "line": 127,
            "description": "Updates user of videos.",
            "itemtype": "method",
            "name": "updateVideosUser",
            "async": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "The ids of the videos",
                    "type": "Array"
                },
                {
                    "name": "userId",
                    "description": "The new user id for the videos",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when it's done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "VideoProvider",
            "module": "providers"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 13,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 20,
            "description": "Fired when a new resource (file or directory) has been added to the directory.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 27,
            "description": "Fired when a resource (file or directory) has been deleted from the directory.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 66,
            "description": "The absolute path of the watched directory.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 77,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 88,
            "description": "The number of \"rename\" events which haven't been treated yet.",
            "itemtype": "property",
            "name": "pendingEventsCounter",
            "type": "Number",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 99,
            "description": "The resources inside the directory with the resource path as the key and true as the value.\n\nThe snapshot represents the current content of the directory and will be updated after each \"rename\" event.",
            "itemtype": "property",
            "name": "snapshot",
            "type": "Object",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 112,
            "description": "The Node.js directory watcher.",
            "itemtype": "property",
            "name": "fsWatcher",
            "type": "fs.FSWatcher",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 129,
            "description": "Waits for the resource to be fully written.",
            "itemtype": "method",
            "name": "awaitWriteFinish",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "resourcePath",
                    "description": "The absolute path of the resource to wait for",
                    "type": "String"
                },
                {
                    "name": "lastStat",
                    "description": "Last information about the resource",
                    "type": "fs.Stats",
                    "optional": true
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 165,
            "description": "Interprets a \"rename\" event.\n\nIf \"rename\" event corresponds to an addition, a \"create\" event will be fired.\nIf \"rename\" event corresponds to a removal, a \"delete\" event will be fired.",
            "itemtype": "method",
            "name": "interpretRename",
            "access": "private",
            "tagname": "",
            "async": 1,
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 222,
            "description": "Watches the directory.",
            "itemtype": "method",
            "name": "watch",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when its starts listening to changes\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryFsWatcher.js",
            "line": 269,
            "description": "Stops watching the directory.",
            "itemtype": "method",
            "name": "close",
            "class": "DirectoryFsWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 16,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 23,
            "description": "Fired when a new resource (file or directory) has been added to the watched folder.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 30,
            "description": "Fired when a resource (file or directory) has been deleted from the watched folder.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 37,
            "description": "Fired when a directory is added to the watched directory.\n\nFired after \"create\" event in case the directory is added to the watched directory.",
            "itemtype": "event",
            "name": "watch",
            "params": [
                {
                    "name": "Path",
                    "description": "of the directory",
                    "type": "String"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 59,
            "description": "The absolute path of the watched directory.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 70,
            "description": "List of watchers for this directory and its sub directories.",
            "itemtype": "property",
            "name": "fsWatchers",
            "type": "Array",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 81,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 98,
            "description": "Checks if a sub directory is actually being watched.",
            "itemtype": "method",
            "name": "isWatched",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directory is actually being watched, false otherwise",
                "type": "Boolean"
            },
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 117,
            "description": "Creates a watcher on the given directory.",
            "itemtype": "method",
            "name": "createWatcher",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to watch",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when its done\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 173,
            "description": "Watches a directory and all its sub directories.",
            "itemtype": "method",
            "name": "watch",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when its done\n - **Error** An error if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/DirectoryWatcher.js",
            "line": 212,
            "description": "Stops watching the directory and all its sub directories.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "Absolute path of the directory to stop watching. If not specified\nthe directory and all its sub directories won't be watched anymore",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "DirectoryWatcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 13,
            "description": "Fired when an error occurred.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "WatcherError"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 20,
            "description": "Fired when a new resource (file or directory) has been added to one of the watched folders.",
            "itemtype": "event",
            "name": "create",
            "params": [
                {
                    "name": "Path",
                    "description": "of the added resource",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 27,
            "description": "Fired when a resource (file or directory) has been deleted from one of the watched folders.",
            "itemtype": "event",
            "name": "delete",
            "params": [
                {
                    "name": "Path",
                    "description": "of the resource before it has been removed",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 34,
            "description": "Fired when a directory is added to watched directories.\n\nFired after \"create\" event in case the directory is added to an already watched directory.",
            "itemtype": "event",
            "name": "watch",
            "params": [
                {
                    "name": "Path",
                    "description": "of the directory",
                    "type": "String"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 90,
            "description": "The list of directories' watchers actually running.",
            "itemtype": "property",
            "name": "directoriesWatchers",
            "type": "Array",
            "final": 1,
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 101,
            "description": "Watcher options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "final": 1,
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 118,
            "description": "Checks if a directory is actually being watched.",
            "itemtype": "method",
            "name": "isWatched",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "directoryPath",
                    "description": "The absolute path of the directory to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if directory is actually being watched, false otherwise",
                "type": "Boolean"
            },
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 137,
            "description": "Adds new directories to watch.",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "directoriesPaths",
                    "description": "The list of absolute directories paths to watch",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function to call when directories are being watched\n - **Array** The list of results with a property \"error\" if something went wrong",
                    "type": "Function"
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/Watcher.js",
            "line": 185,
            "description": "Stops watching directories.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "directoriesPaths",
                    "description": "The list of absolute directories' paths to stop watching. If no directories are\nspecified all watching directories won't be watched anymore",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "Watcher",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 24,
            "description": "The fs.FSWatcher's error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 33,
            "description": "The absolute path of the watched directory the error belongs to.",
            "itemtype": "property",
            "name": "directoryPath",
            "type": "String",
            "final": 1,
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 42,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/watcher/WatcherError.js",
            "line": 50,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "WatcherError",
            "module": "watcher"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 23,
            "description": "The publish manager error code.",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 32,
            "description": "Error message.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishError.js",
            "line": 41,
            "description": "Error name.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "final": 1,
            "class": "PublishError",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 22,
            "description": "Fired when an error occurred while processing a package.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "The",
                    "description": "error",
                    "type": "Error"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 29,
            "description": "Fired when a package process has succeed.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "The",
                    "description": "processed package",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 36,
            "description": "Fired when a media in error restarts.",
            "itemtype": "event",
            "name": "retry",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 43,
            "description": "Fired when a media stuck in \"waiting for upload\" state starts uploading.",
            "itemtype": "event",
            "name": "upload",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 50,
            "description": "Fired when media state has changed.",
            "itemtype": "event",
            "name": "stateChanged",
            "params": [
                {
                    "name": "The",
                    "description": "media",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 107,
            "description": "Medias waiting to be processed.",
            "itemtype": "property",
            "name": "queue",
            "type": "Array",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 116,
            "description": "Medias being processed.",
            "itemtype": "property",
            "name": "pendingPackages",
            "type": "Array",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 125,
            "description": "Video model.",
            "itemtype": "property",
            "name": "videoModel",
            "type": "VideoModel",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 134,
            "description": "Maximum number of medias to treat in parallel.",
            "itemtype": "property",
            "name": "maxConcurrentPackage",
            "type": "Number",
            "final": 1,
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 149,
            "description": "Removes a media from pending medias.",
            "itemtype": "method",
            "name": "removeFromPending",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media package to remove",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 173,
            "description": "Handles media error event.",
            "itemtype": "method",
            "name": "onError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "The error",
                    "type": "Error"
                },
                {
                    "name": "mediaPackage",
                    "description": "The media on error",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 197,
            "description": "Handles media complete event.",
            "itemtype": "method",
            "name": "onComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The package on error",
                    "type": "Object"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 216,
            "description": "Creates a media package manager corresponding to the media type.",
            "itemtype": "method",
            "name": "createMediaPackageManager",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media to manage",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A media package manager",
                "type": "Package"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 246,
            "description": "Adds media package to the list of pending packages.",
            "itemtype": "method",
            "name": "addPackage",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "The media package to add to pending packages",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the media package is successfully added to pending packages\nfalse if it has been added to queue",
                "type": "Boolean"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 280,
            "description": "Gets an instance of the PublishManager.",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "videoModel",
                    "description": "The videoModel",
                    "type": "VideoModel"
                },
                {
                    "name": "maxConcurrentPackage",
                    "description": "The maximum number of medias to treat in parallel",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The PublishManager singleton instance",
                "type": "PublishManager"
            },
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 296,
            "description": "Publishes the given media package.\n\nMedia package must be of one of the supported type.",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "mediaPackage",
                    "description": "Media to publish",
                    "type": "Object",
                    "props": [
                        {
                            "name": "originalPackagePath",
                            "description": "Package absolute path",
                            "type": "String"
                        },
                        {
                            "name": "packageType",
                            "description": "The package type",
                            "type": "String"
                        },
                        {
                            "name": "title",
                            "description": "The title to use for this media, default to the file name without extension",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 359,
            "description": "Retries publishing a media package which is on error.",
            "itemtype": "method",
            "name": "retry",
            "params": [
                {
                    "name": "packageId",
                    "description": "The id of the package on error",
                    "type": "String"
                },
                {
                    "name": "forceRetry",
                    "description": "Force retrying a package no matter its state",
                    "type": "Boolean"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 406,
            "description": "Retries publishing all packages in a non stable state.\n\nStable states are :\n- STATES.ERROR\n- STATES.WAITING_FOR_UPLOAD\n- STATES.READY\n- STATES.PUBLISHED",
            "itemtype": "method",
            "name": "retryAll",
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishManager.js",
            "line": 444,
            "description": "Uploads a media blocked in \"waiting to upload\" state.",
            "itemtype": "method",
            "name": "upload",
            "params": [
                {
                    "name": "packageId",
                    "description": "The id of the package waiting to be uploaded",
                    "type": "String"
                },
                {
                    "name": "platform",
                    "description": "The type of the video platform to upload to",
                    "type": "String"
                }
            ],
            "class": "PublishManager",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 33,
            "description": "Publish public router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 42,
            "description": "Publish private router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 51,
            "description": "Publish web service router.",
            "itemtype": "property",
            "name": "router",
            "type": "Router",
            "final": 1,
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 66,
            "description": "Sets listeners on core events.",
            "itemtype": "method",
            "name": "setCoreListeners",
            "access": "private",
            "tagname": "",
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 78,
            "description": "Prepares plugin by creating required database indexes.\n\nThis is automatically called by core application after plugin is loaded.",
            "itemtype": "method",
            "name": "init",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/PublishPlugin.js",
            "line": 113,
            "description": "Starts the watcher when plugin is ready.\n\nThis is automatically called by core application after plugin is initialized.",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when it's done with :\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "PublishPlugin",
            "module": "publish"
        },
        {
            "file": "app/server/listener.js",
            "line": 21,
            "description": "Handles event when users have been deleted.\n\nVideos belonging to these users have to be anonymized.\nIf one of the removed users is the one choosed as the default user for the watcher,\nit must be reset to the anonymous user.",
            "itemtype": "method",
            "name": "onUsersDeleted",
            "static": 1,
            "params": [
                {
                    "name": "The",
                    "description": "list of deleted user ids",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to call when it's done\n - **Error** An error if something went wrong, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "listener",
            "module": "publish"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nGets the closure to remove the given directory.",
            "line": " app/server/models/VideoModel.js:83"
        },
        {
            "message": "Missing item type\nExecutes oldest update in the queue.",
            "line": " app/server/models/VideoModel.js:253"
        },
        {
            "message": "Missing item type\nResolves videos resources urls using CDN url.\n\nVideos may have attached resources like files associated to tags, timecodes images, thumbnail image and\nso on. These resources must be accessible through an url. As all resources must, in the future, reside in\na CDN, resolveResourcesUrls transforms all resources URIs to URLs based on CDN.",
            "line": " app/server/models/VideoModel.js:293"
        },
        {
            "message": "Missing item type\nPackage is defragmenting the mp4.",
            "line": " app/server/packages/states.js:166"
        }
    ]
}